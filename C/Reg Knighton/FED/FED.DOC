			FED.PRG (v 3.7.86)

FED.PRG was written to help make beautiful programs for the Atari 520ST. It is
used to create, modify and archive proportionally-spaced fonts in GEM format.
(See appendix G of GEM VDI Programmer's Guide for info on GEM font structure.)

When the user wishes to create a font from scratch, FED.PRG uses the TOS
system font as a starting point. This approach is faster than beginning a
session with blank cells.

Making a new font requires typing a valid TOS filename (the .ext is not
required and will be ignored if entered) in the selection field of the File
Selector Box, then choosing 1 of 3 options: 6x6, 8x8, or 8x16. The system font
in the size chosen then becomes the form from which the new font is created.
In this sense, the system font is the 'parent' of the new font.

The new font inherits all of the global 'traits' of its parent (e.g. ascent/
descent/half line heights, skew/lightening masks, etc) except for the font-ID#
and the font-facename. Both of these are derived from the filename that the
user gives to the new font. Also, the default system font flag is cleared. What
distinguishes the new font from the parent is the bit-image data, and the
cell-widths that the user modifies.

FED.PRG provides three options for font output:

output option           file(s) produced

        .O              .O and .FED
        .FED            .FED only
        .C              .C and .FED

Note that regardless of the option selected, a .FED file is always produced.
This is because currently, FED.PRG can only read .FED files. This approach
guarantees that any work saved can be edited later. 

The three output choices are:

(1) .FED format.

	A binary image of three data structures that comprise a font:

		font header
		character offset table
		font data

	These three data are contiguous and occur in the order shown.

	This 'default' storage format is the most compact. As said before, this
	is currently the ONLY format that FED.PRG can read. Once a font has
	been created, any subsequent editing can only be done to a .FED file.

	Applications that swap fonts from disk to RAM at runtime are best
	served by this format.

(2) .O	is an object module that can be linked with LINK68.

	It contains a global label that refers to the base address of the font
	as described for .FED format. This assembly fragment illustrates .O
	format:

		.globl _examp
	_examp:
			
		(font header)
		(character offset table)
		(font data)

	So, from C, one might reference the above font like this:

	extern struct font_hdr examp, *p = examp;
	
	/* send font examp's name, id, and points size to stdout */

	printf(	"Font %s with ID #: %d is %d points high.\n",
		p->facename,
		p->id,
		p->size); 

	The .O format is most convenient for embedding fonts in a program.
	In fact, the font used in FED.PRG's information window was bound to
	the program at link time as a .O file. This allowed trying several
	fonts without re-compiling or re-assembling; just re-linking.

(3) .C	is C language source statement format.

	This option produces bulky (10K - 32K) files, and is not likely to be
	used frequently. It is provided primarily for archiving and to assist
	in porting. It is machine readable and fonts output in this format can
	be compiled.

Three entities are derived from a font's filename. Perhaps the best way to
avoid confusion in attempting to describe them is to show some examples:

user creates font                 FED.PRG generates:
	
name:               .O globl label   .C struct name   font facename
	
3.fed                   __3             _3              3
SAMPLE.FED              _sample         sample          SAMPLE
THINFONT.FED            _thinfon        thinfon         THINFONT
8X8HELV.FED             __8x8hel        _8x8hel         8X8HELV
