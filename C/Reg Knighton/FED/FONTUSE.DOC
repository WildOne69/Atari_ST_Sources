		Interfacing Fonts with GEM on the ST 

The items covered here require that the reader be familiar with GEM font
structure as described in Appendix G of the GEM VDI Programmer's Guide.
It is also described in the January 1986 issue of Antic on page 48.

		Definitions

For this discussion, the terms: font, .FED file, and font list will be used as
defined here:

font
A font is a collection of 3 data structures:

	1) font header
	2) character offset table
	3) font data

When we say 'the address of a font', we're referring to the address of the base
of the font header. When we speak of a font's field, we refer to a field in the
font header.

.FED file
A .FED file is a binary image of a font where the 3 data structures comprising
the font are contiguous and in the order described above.

font list
A font list is a memory resident group of fonts where the 'ptr to next font'
field for one font contains the address of the next font in the list. The last
font in the list MUST have a NULL pointer in its 'ptr to next font' field. A
font list can consist of only one font whose 'ptr to next font' field is NULL.


		Interfacing Fonts With GEM

The two functions described below are supplied in the file FONTUSE.S.

v_initf(&font)
When a font is loaded into RAM, the values for the 'pointer to character offset
table' and 'pointer to font data' fields must be determined. v_initf() takes a
font address as its argument then performs this task. This function assumes
that the font is in .FED format as described above.

v_regf(handle, &first_font_in_list, &effects_buf, half_size_of_effects_buf)
v_regf() is a binding that is used to register a user supplied font list with
GEM VDI. It is used in lieu of vst_load_fonts(). Upon return from this call,
each font in the font list passed to v_regf() is selectable with a standard
vst_font(handle, font_id_number) call and hence usable with any text oriented
VDI function call. The arguments for v_regf() are:

	int handle;
	same as with any VDI call

	struct font_hdr *first_font_in_list;
	this is the address of the font that is at the head of
	the font list being registered.

	int effects_buf[];
	A buffer must be allocated for special effects operations applied
	to fonts (skewing, scaling, etc). This one buffer is used for ALL
	fonts that make up a font list. It must have at least 4 bytes for
	each pixel in the largest character CELL used. So if we use fonts
	1, 2, and 3, and font 2 has the single largest character cell, a
	'W' that's 16 high by 10 wide, than our buffer must be:

			16 * 10 * 4 = 640 bytes

	In this case, our program maintains a 640 byte buffer and we pass
	its address to v_regf() for this argument.

	int half_size_of_effects_buf;
	This is a value (in bytes) half the size of effects_buf. For the case
 	described above, this argument would be 320.


		Font Management

Changing the font list is possible once it has been registered with VDI. This
means that fonts can be added, removed, or replaced while an application is
running. Altering the linkage of the appropriate 'ptr to next font' field(s)
is all that is required. The only restriction is that, to remove or replace the
font that is at the head of the list, an addtional v_regf() call must be made
with a new 'first_font_in_list' argument'. 

For example, say we have 5 fonts: f1, f2, f3, f4, and f5. We will use them all
at one point or another in our program, but we can have at most 3 resident at
any one time. The notation f1 -> f2 means:

	For fonts f1 and f2, f1 points to f2. That is, the
	'pointer to next font' field of f1 contains the
	address of f2.

So with our 3 maximum rule, we:

	* allocate RAM for f1, f2, f3
	* load f1, f2, and f3 from disk to RAM
	* call v_initf() once for each: f1, f2, f3
	* set up the linkage: f1 -> f2 -> f3 -> NULL
	* call v_regf(handle, &f1) (f1 being at the head of the font list)

Now, to replace f2 with f4, we do this:

	* reclaim f2's RAM
	* allocate RAM for f4
	* load f4 from disk to RAM
	* call v_initf(&f4) 
	* f1 -> f4 (point f1 to f4)
	* f4 -> f3 (point f4 to f3)

	result: f1 -> f4 -> f3 -> NULL


To replace f3 with f2:

	* reclaim f3's RAM
	* allocate RAM for f2
	* load f2 from disk to RAM
	* call v_initf(&f2)
	* f4 -> f2 (point f4 to f2) 
	* f2 -> NULL (end of font list must be NULL)

	result: f1 -> f4 -> f2 -> NULL

If we need f2, f4, and f5, then f1 must be removed. Since f1 is at the head of
the font list, another v_regf() call is required:

	* reclaim f1's RAM
	* allocate RAM for f5	
	* load f5 from disk to RAM
	* call v_initf(&f5)
	* set up linkage: f2 -> f4 -> f5 -> NULL
	* call v_regf(handle, &f2)

Note for Line A users:
The font list that v_regf() deals with is separate from the one returned from
the line A $A000 call.
