' *****************************************************************************
' *     BLT_DEMO.GFA - Demonstration fÅr direkte Blitter-Programmierung       *
' *****************************************************************************
RESERVE 8000                               ! 8 kB sind genug
IF MALLOC(-1)>=32000 THEN                  ! genug Platz fÅr 1 Bild ?
  p_bild%=MALLOC(32000)                    ! aber sicher !
ELSE
  PRINT AT(1,1);"Nicht genug RAM frei !"   ! leider nicht
  RESERVE
  END
ENDIF
' in die folgenden INLINE-Blîcke werden die Assembler-Codes geladen:
INLINE blt_up%,176
INLINE blt_rt%,172
INLINE cpu_up%,52
INLINE cpu_rt%,108
BLOAD "a:\bild.scr",p_bild%                ! Bild im Screenformat laden
'
PRINT AT(18,1);"Demo-Programm fÅr direkte Blitter-Programmierung"
PRINT AT(30,2);"von Andreas Hollmann"
~INP(2)
show_message("Vertikales Scrolling mit dem Blitter")
BMOVE p_bild%,XBIOS(2),32000                ! Bild aus Puffer in den Bildschirm
~C:blt_up%(L:XBIOS(2))                      ! Assembler-Routine aufrufen
show_message("Vertikales Scrolling mit der CPU")
BMOVE p_bild%,XBIOS(2),32000
~C:cpu_up%(L:XBIOS(2))
show_message("Horizontales Scrolling mit dem Blitter")
BMOVE p_bild%,XBIOS(2),32000
~C:blt_rt%(L:XBIOS(2))
show_message("Horizontales Scrolling mit der CPU")
BMOVE p_bild%,XBIOS(2),32000
~C:cpu_rt%(L:XBIOS(2))                      ! Assembler-Routine aufrufen
'
~MFREE(p_bild%)                             ! Bild-Puffer an GEMDOS zurÅckgeben
RESERVE                                     ! alles wie vorher
END
'
PROCEDURE show_message(text$)
  CLS
  PRINT AT(1,1);text$;"    (weiter mit Taste...)"
  ~INP(2)
  CLS
RETURN
