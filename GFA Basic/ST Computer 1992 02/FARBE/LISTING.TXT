' ***********************************************
'      Umrechenroutinen fÅr die Farbmodelle
'          geschrieben in GFA-BASIC 3.5
'            (c) 1992 MAXON Computer
' ***********************************************
PROCEDURE rgb_nach_vdi(r,g,b,
                       VAR rot%,gruen%,blau%)
  '
  ' Transformation:     RGB --> VDI-RGB
  '
  ' Eingabe:
  '
  '   r,g,b - die Koordinaten der Farbe
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  ' Ausgabe:
  '
  '   rot,gruen,blau - die FarbintensitÑten
  '                    fÅrs VDI
  '   rot,gruen,blau Ó {0,1,...,1000}
  '
  rot%=ROUND(1000*r)
  gruen%=ROUND(1000*g)
  blau%=ROUND(1000*b)
RETURN
'
PROCEDURE vdi_nach_rgb(rot%,gruen%,blau%,
                       VAR r,g,b)
  '
  ' Transformation:     VDI-RGB --> RGB
  '
  ' Eingabe:
  '
  '   rot,gruen,blau - die FarbintensitÑten
  '                    fÅrs VDI
  '   rot,gruen,blau Ó {0,1,...,1000}
  '
  ' Ausgabe:
  '
  '   r,g,b - die Koordinaten der Farbe
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  r=rot%/1000
  g=gruen%/1000
  b=blau%/1000
RETURN
'
'
PROCEDURE rgb_nach_cmy(r,g,b,VAR c,m,y)
  '
  ' Transformation:     RGB --> CMY
  '
  ' Eingabe:
  '
  '   r,g,b - die Koordinaten der Farbe
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  ' Ausgabe:
  '
  '   c,m,y - die entsprechenden Koordinaten
  '           im CMY-EinheitswÅrfel
  '   c,m,y Ó [0,1]
  '
  c=1-r
  m=1-g
  y=1-b
RETURN
'
PROCEDURE cmy_nach_rgb(c,m,y,VAR r,g,b)
  '
  ' Transformation:     CMY --> RGB
  '
  ' Eingabe:
  '
  '   c,m,y - die Koordinaten der Farbe
  '           im CMY-EinheitswÅrfel
  '   c,m,y Ó [0,1]
  '
  ' Ausgabe:
  '
  '   r,g,b - die entsprechenden Koordinaten
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  r=1-c
  g=1-m
  b=1-y
RETURN
'
PROCEDURE rgb_nach_hsv(r,g,b,VAR h,s,v)
  '
  ' Transformation:     RGB --> HSV
  '
  ' Eingabe:
  '
  '   r,g,b - die Koordinaten der Farbe
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  ' Ausgabe:
  '
  '   h,s,v - die entsprechenden Werte
  '           im HSV-Modell
  '   h Ó [0,360] und s,v Ó [0,1]
  '
  ' Beachte:  Bei s = 0 ist h nicht definiert!
  '
  LOCAL max_wert,min_wert,diff
  '
  max_wert=MAX(r,g,b)
  min_wert=MIN(r,g,b)
  '                           ! Helligkeit...
  v=max_wert
  '                           ! SÑttigung...
  diff=max_wert-min_wert
  IF v=0
    s=0                       ! schwarz
  ELSE
    s=diff/max_wert
  ENDIF
  '                           ! Farbe...
  IF s>0
    IF max_wert=r             ! max = r:
      IF min_wert=g
        h=5+(r-b)/diff        !  h Ó [+5,+6]
      ELSE
        h=1-(r-g)/diff        !  h Ó [0,+1]
      ENDIF
    ELSE IF max_wert=g        ! max = g:
      IF min_wert=b
        h=1+(g-r)/diff        !  h Ó [+1,+2]
      ELSE
        h=3-(g-b)/diff        !  h Ó [+2,+3]
      ENDIF
    ELSE                      ! max = b:
      IF min_wert=r
        h=3+(b-g)/diff        !  h Ó [+3,+4]
      ELSE
        h=5-(b-r)/diff        !  h Ó [+4,+5]
      ENDIF
    ENDIF
    MUL h,60        ! h auf 360 Grad erweitern
  ENDIF
RETURN
'
PROCEDURE hsv_nach_rgb(h,s,v,VAR r,g,b)
  '
  ' Transformation:     HSV --> RGB
  '
  ' Eingabe:
  '
  '   h,s,v - die Werte der Farbe
  '           im HSV-Modell
  '   h Ó [0,360] und s,v Ó [0,1]
  '
  ' Ausgabe:
  '
  '   r,g,b - die entsprechenden Koordinaten
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  LOCAL t1,t2,t3,fract,i%
  '
  IF s=0            ! schwarz..weiû
    r=v
    g=v
    b=v
  ELSE
    h=h/60          ! Betrachte 6 Kreisabschnitte
    i%=TRUNC(h)     ! Nummer des Kreisabschnittes
    fract=h-i%      ! fract Ó ]-1,+1[
    t1=v*(1-s)
    t2=v*(1-(s*fract))
    t3=v*(1-(s*(1-fract)))
    SELECT i%
    CASE 0          ! rot..gelb
      r=v           !  r dominiert
      g=t3
      b=t1
    CASE 1          ! gelb..grÅn
      r=t2
      g=v           !  g dominiert
      b=t1
    CASE 2          ! grÅn..cyan
      r=t1
      g=v           !  g dominiert
      b=t3
    CASE 3          ! cyan..blau
      r=t1
      g=t2
      b=v           !  b dominiert
    CASE 4          ! blau..magenta
      r=t3
      g=t1
      b=v           !  b dominiert
    CASE 5          ! magenta..rot
      r=v           !  r dominiert
      g=t1
      b=t2
    ENDSELECT
  ENDIF
RETURN
'
PROCEDURE rgb_nach_hls(r,g,b,VAR h,l,s)
  '
  ' Transformation:     RGB --> HLS
  '
  ' Eingabe:
  '
  '   r,g,b - die Koordinaten der Farbe
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  ' Ausgabe:
  '
  '   h,l,s - die entsprechenden Werte
  '           im HLS-Modell
  '   h Ó [0,360] und l,s Ó [0,1]
  '
  ' Beachte:    Bei s = 0 ist h nicht definiert!
  '
  LOCAL max_wert,min_wert,diff
  '
  max_wert=MAX(r,g,b)
  min_wert=MIN(r,g,b)
  '                           ! Helligkeit...
  l=(max_wert+min_wert)/2
  '                           ! SÑttigung...
  diff=max_wert-min_wert
  IF ABS(diff)<1.0E-07
    s=0                       ! grau
  ELSE
    IF l<=0.5
      s=diff/(max_wert+min_wert)
    ELSE
      s=diff/(2-max_wert-min_wert)
    ENDIF
  ENDIF
  '                           ! Farbe...
  IF s>0
    IF max_wert=r             ! max = r:
      IF min_wert=g           !  min = g:
        h=1+(r-b)/diff        !   h Ó [+1,+2]
      ELSE                    !  min = b:
        h=3-(r-g)/diff        !   h Ó [+2,+3]
      ENDIF
    ELSE IF max_wert=g        ! max = g:
      IF min_wert=b           !  min = b:
        h=3+(g-r)/diff        !   h Ó [+3,+4]
      ELSE                    !  min = r:
        h=5-(r-b)/diff        !   h Ó [+4,+5]
      ENDIF
    ELSE                      ! max = b:
      IF min_wert=r           !  min = r:
        h=5+(b-g)/diff        !   h Ó [+5,+6]
      ELSE                    !  min = g:
        h=1-(b-r)/diff        !   h Ó [0,+1]
      ENDIF
    ENDIF
    MUL h,60        ! h auf 360 Grad erweitern
  ENDIF
RETURN
'
FUNCTION rgb(q1,q2,farbe)
  IF farbe>360
    SUB farbe,360
  ENDIF
  IF farbe<60                 ! blau..magenta
    return=q1+(q2-q1)*farbe/60
  ELSE IF farbe<180           ! magenta..gelb
    RETURN q2
  ELSE IF farbe<240           ! gelb..grÅn
    RETURN q1+(q2-q1)*(240-farbe)/60
  ELSE                        ! grÅn..blau
    RETURN q1
  ENDIF
ENDFUNC
'
PROCEDURE hls_nach_rgb(h,l,s,VAR r,g,b)
  '
  ' Transformation:     HLS --> RGB
  '
  ' Eingabe:
  '
  '   h,l,s - die Werte der Farbe
  '           im HLS-Modell
  '   h Ó [0,360] und l,s Ó [0,1]
  '
  ' Ausgabe:
  '
  '   r,g,b - die entsprechenden Koordinaten
  '           im RGB-EinheitswÅrfel
  '   r,g,b Ó [0,1]
  '
  LOCAL t1,t2
  '
  IF l<=0.5
    p2=l+l*s
  ELSE
    p2=l+(1-l)*s
  ENDIF
  p1=2*l-p2
  '
  IF s=0            ! schwarz..weiû
    r=l
    g=l
    b=l
  ELSE
    r=FN rgb(p1,p2,h)
    g=FN rgb(p1,p2,h+240)
    b=FN rgb(p1,p2,h+120)
  ENDIF
RETURN

