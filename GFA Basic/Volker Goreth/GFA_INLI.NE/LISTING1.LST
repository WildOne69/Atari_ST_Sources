' ****************** LISTING 1 ******************
' *    RSC-Pointer & -Koordinaten angleichen    *
' *    -------------------------------------    *
' *    Sprache:  GFA-BASIC V3.x                 *
' *    Autor:    Volker Goreth, 4150 Krefeld    *
' *    Datum:    09.12.90, geaend.: 03.02.91    *
' *    -------------------------------------    *
' *       (c) 1991 by MAXON Computer GmbH       *
' ***********************************************
'
FUNCTION rsrc_conv(l.ra%,l.buf!)
  ' <-- l.rs&       !Laenge des RSC-Datenbereichs
  '                 ! oder 0 bei Fehler
  ' --> l.ra%       !RSC-INLINE-Adresse
  ' --> l.buf!      !RSC-Daten puffern
  '
  LOCAL l.pa%       !Puffer-Adresse
  LOCAL l.o&,l.t&   !Laufvar.
  LOCAL l.ob&       !Beginn des Objekt-Feldes
  LOCAL l.no&       !Anzahl OBJECTS
  LOCAL l.nt&       !Anzahl TREES
  LOCAL l.rs&       !Laenge des RSC-Datenbereichs
  LOCAL l.napt%     !Neue TREE-TABLE-Adr.
  LOCAL l.gb%       !Adr. des AES-Global-Feldes
  LOCAL l.of%       !Objekt-Feld
  LOCAL l.ns&       !Anzahl der freien Strings
  LOCAL l.ni&       !Anzahl der freien Images
  LOCAL l.adr%,l.i& !Hilfsvar., Laufvar.
  '
  l.rs&=WORD{l.ra%+&H22}
  '
  ' Pruefen, ob rsc_buf|() nicht schon
  '  dimensioniert ist (-> FEHLER + ABBRUCH!):
  IF l.buf! AND DIM?(rsc_buf|())>0
    l.rs&=0
  ENDIF
  '
  IF l.rs&>0      !Nur, wenn INLINE nicht leer
    '             ! und rsc_buf|() noch nicht
    '             ! dimensioniert worden ist
    '
    ' RSC-Daten ggf. puffern (nur Interpreter):
    IF l.buf!
      DIM rsc_buf|(l.rs&)             !RSC-Puffer
      l.pa%={*rsc_buf|()}+4       !Puffer-Adresse
      BMOVE l.ra%,l.pa%,l.rs&       !RSC kopieren
      l.ra%=l.pa%                   !Neue Adresse
    ENDIF
    '
    ' Neue Adresse der TREE-Tabelle:
    l.napt%=l.ra%+WORD{l.ra%+&H12}
    ' Adr. des AES-Global-Feldes:
    l.gb%={GB+4}
    ' AES neue Tabellen-Adr. zuweisen:
    {l.gb%+10}=l.napt%
    ' Bisheriger Start des Objekt-Feldes:
    l.ob&=WORD{l.ra%+2}
    ' Neue Startadr. des Objekt-Feldes:
    l.of%=l.ra%+l.ob&
    ' Anzahl der Objekte im File -1:
    l.no&=WORD{l.ra%+&H14}-1
    ' Anzahl der Trees im File -1:
    l.nt&=WORD{l.ra%+&H16}-1
    '
    FOR l.o&=0 TO l.no& !Alle Objekte
      ' Koordinaten umrechnen:
      ~RSRC_OBFIX(l.of%,l.o&)
      '
      SELECT OB_TYPE(l.of%,l.o&)
        '
        ' Zeiger auf Struktur mit 3 Zeigern
        '  - TEDINFO bzw. ICONBLK
        ' (TEXT,BOXTEXT,FTEXT,FBOXTEXT,ICON):
      CASE &H15,&H16,&H1D,&H1E,&H1F
        OB_SPEC(l.of%,l.o&)=OB_SPEC(l.of%,l.o&)+l.ra%
        {OB_SPEC(l.of%,l.o&)}={OB_SPEC(l.of%,l.o&)}+l.ra%
        {OB_SPEC(l.of%,l.o&)+4}={OB_SPEC(l.of%,l.o&)+4}+l.ra%
        {OB_SPEC(l.of%,l.o&)+8}={OB_SPEC(l.of%,l.o&)+8}+l.ra%
        '
        ' Zeiger auf Struktur mit 2 Zeigern
        '  - APPLBLK
        ' (PROGDEF):
      CASE &H18
        OB_SPEC(l.of%,l.o&)=OB_SPEC(l.of%,l.o&)+l.ra%
        {OB_SPEC(l.of%,l.o&)}={OB_SPEC(l.of%,l.o&)}+l.ra%
        {OB_SPEC(l.of%,l.o&)+4}={OB_SPEC(l.of%,l.o&)+4}+l.ra%
        '
        ' Zeiger auf Struktur mit 1 Zeiger
        '  - BITBLK
        ' (IMAGE):
      CASE &H17
        OB_SPEC(l.of%,l.o&)=OB_SPEC(l.of%,l.o&)+l.ra%
        {OB_SPEC(l.of%,l.o&)}={OB_SPEC(l.of%,l.o&)}+l.ra%
        '
        ' Zeiger auf Datenstruktur
        '  - C-Text
        ' (BUTTON,STRING,TITLE):
      CASE &H1A,&H1C,&H20
        OB_SPEC(l.of%,l.o&)=OB_SPEC(l.of%,l.o&)+l.ra%
      ENDSELECT
    NEXT l.o&
    '
    ' ap_ptree-Tabelle aktualisieren:
    FOR l.t&=0 TO l.nt& !Alle Baeume
      {l.napt%+(4*l.t&)}={l.napt%+(4*l.t&)}+l.ra%
    NEXT l.t&
    '
    ' FREE_STRINGs-Tabelle aktualisieren:
    l.ns&=WORD{l.ra%+&H1E}-1    !Anzahl -1
    IF l.ns&>-1
      l.adr%=l.ra%+WORD{l.ra%+&HA}
      FOR l.i&=0 TO l.ns&
        {l.adr%+(4*l.i&)}={l.adr%+(4*l.i&)}+l.ra%
      NEXT l.i&
    ENDIF
    '
    ' FREE_IMAGEs-Tabelle aktualisieren:
    l.ni&=WORD{l.ra%+&H20}-1    !Anzahl -1
    IF l.ni&>-1
      l.adr%=l.ra%+WORD{l.ra%+&H10}
      FOR l.i&=0 TO l.ni&
        {l.adr%+(4*l.i&)}={l.adr%+(4*l.i&)}+l.ra%
        ' Pointer in BITBLK relozieren:
        {{l.adr%+(4*l.i&)}}={{l.adr%+(4*l.i&)}}+l.ra%
      NEXT l.i&
    ENDIF
    '
  ENDIF
  '
  RETURN l.rs&
ENDFUNC
