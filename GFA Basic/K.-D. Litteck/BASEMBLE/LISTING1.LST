' ***** Test.1  ***********
' ** Beispielprogramm *****
' ** zum GFA Bas-sembler **
' ** K.-D. Litteck ********
' ** Juli 1991 ************
' ** in GFA-Basic 3.5 ****
'
'
' Variablen Deklarieren ****
~FRE(0)
RESERVE 15000  ! Speicher zurÅckgeben **
CLS
anfram%=HIMEM+100  ! Anfang freies RAM *
bildram%=LPEEK(&H44E) ! Ende freies RAM
' Speicher auf einen durch 4 teilbaren 
' Wert
anzb%=(bildram%-anfram%)/4*4
'
PRINT AT(5,1);"Es werden "+STR$(anzb%/4)
      +" Longwords getestet"
' Neue Anfangsadresse **
anfram%=bildram%-anzb%
'
' Der Testwert ***
testwert%=&HFFFF0000 
t=TIMER
fehler%=0
adr%=anfram%
' Speicher beschreiben ***
GOSUB write(adr%,anzb%/4,testwert%)  
'
' Kontrollesen ***
GOSUB read(adr%,anzb%/4,testwert%,*fehler)
GOSUB zeit   ! Zeit anzeigen ***
PRINT AT(5,5);"Fehler = "+STR$(fehler%)
ALERT 1,"Programm beendet",1," OK ",a|
END
'
' Zeit berechnen ***
PROCEDURE zeit   
  t%=(TIMER-t)/200  ! Zeit in Sekunden *
  h%=t%/3600   ! Stunden ***
  t%=t%-(h%*3600)  ! Stunden abziehen **
  m%=t%/60  ! Minuten ***
  t%=t%-(m%*60)  ! Minuten abziehen ***
' Die nÑchsten 5 Zeilen sind 1 Befehl *
  t$=LEFT$("00",2-LEN(STR$(h%)))+STR$(h%)
     +":"+LEFT$("00",2-LEN(STR$(m%)))
     +STR$(m%)+":"
     +LEFT$("00",2-LEN(STR$(t%)))
     +STR$(t%)
  PRINT AT(5,3);"Zeitdauer = "+t$
RETURN
'
PROCEDURE write(adr%,anzb%,testwert%)
  $X write  ! Assemblerroutine ***
' Dies wird vom Compiler ignoriert **
  FOR i%=1 TO anzb%
    LONG{adr%}=testwert%
    ADD adr%,4
  NEXT i%
RETURN
'
PROCEDURE read(adr%,anzb%,testwert%,fehler%)
  $X read  ! Assemblerroutine ***
' Wie bei write ****
  FOR i%=1 TO anzb%
    IF testwert%<>LONG{adr%}
      INC fehler%
    ENDIF
    ADD adr%,4
  NEXT i%
RETURN

