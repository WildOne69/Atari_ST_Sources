' -------------------------------------------
'               FRACTAL  V1.1
'           Fracales einmal anders !
' -------------------------------------------
'         Tobias Blickle 90/91
' -------------------------------------------
' Siehe Spektrum der Wissenschaft 9/1989
' -------------------------------------------
'
DIM menu$(60)
DIM decoder%(4)
DIM sierp_a(3,2,2),sierp_b(3,2),sierp_ks(2,2)
DIM koch_a(4,2,2),koch_b(4,2),koch_ks(2,2)
DIM blatt_a(4,2,2),blatt_b(4,2),blatt_ks(2,2)
DIM farn_a(4,2,2),farn_b(4,2),farn_ks(2,2)
DIM komplex_ks(2,2)
DIM det(10)
'
GOSUB aufloesung_bestimmen
GOSUB global_set_up
GOSUB init_transformation
GOSUB init_menu
'
DEFMOUSE 0
DO
  ON MENU
LOOP
END
'
PROCEDURE init_menu
menu_daten:
  DATA "Desk","  Åber FRACTAL","-------------------",1,2,3,4,5,6,""
  DATA "Datei","-- Bild --","  laden","  speichern","----------------","  Ende",""
  DATA "Linear","- Chaos-Spiel -","  Sierpinski","  Kochkurve","  Farn","  Ahorn","- Bildtransformation -","  Sierpinski","  Kochkurve","  Farn","  Ahorn",""
  DATA "Julia","  Funktion ...","  Chaos-Spiel","  Bildtransformation",""
  DATA "Malen","  Stift 1","  Stift 2","  Stift 3","  Stift 4","  FÅllen","  Lîschen","","*"
  '
  RESTORE menu_daten
  i%=0
  REPEAT
    READ menu$(i%)
    INC i%
  UNTIL menu$(i%-1)="*"
  menu$(i%-1)=""
  SGET screen$
  MENU menu$()
  ON MENU GOSUB menu_auswertung
RETURN
PROCEDURE menu_auswertung
  LOCAL i%
  IF menu$(MENU(0))="  Ende"
    END
  ENDIF
  IF menu$(MENU(0))="  Åber FRACTAL"
    ALERT 0,"     Fractal V1.1|Fractals einmal anders !|   Tobias Blickle 91",1,"ok",i%
  ENDIF
  '
  IF MENU(0)=19
    CLS
    GOSUB chaos_spiel(3,sierp_a(),sierp_b(),sierp_ks())
    SGET screen$
  ENDIF
  IF MENU(0)=20
    CLS
    GOSUB chaos_spiel(4,koch_a(),koch_b(),koch_ks())
    SGET screen$
  ENDIF
  IF MENU(0)=21
    CLS
    GOSUB chaos_spiel(4,farn_a(),farn_b(),farn_ks())
    SGET screen$
  ENDIF
  IF MENU(0)=22
    CLS
    GOSUB chaos_spiel(4,blatt_a(),blatt_b(),blatt_ks())
    SGET screen$
  ENDIF
  '
  IF MENU(0)=24
    GOSUB kopierer(3,screen$,sierp_a(),sierp_b(),sierp_ks())
  ENDIF
  IF MENU(0)=25
    GOSUB kopierer(4,screen$,koch_a(),koch_b(),koch_ks())
  ENDIF
  IF MENU(0)=26
    GOSUB kopierer(4,screen$,farn_a(),farn_b(),farn_ks())
  ENDIF
  IF MENU(0)=27
    GOSUB kopierer(4,screen$,blatt_a(),blatt_b(),blatt_ks())
  ENDIF
  '
  '
  IF menu$(MENU(0))="  FÅllen"
    GOSUB fuellen
  ENDIF
  IF menu$(MENU(0))="  Stift 1"
    DEFLINE 1,2
    GOSUB grafik
  ENDIF
  IF menu$(MENU(0))="  Stift 2"
    DEFLINE 1,4
    GOSUB grafik
  ENDIF
  IF menu$(MENU(0))="  Stift 3"
    DEFLINE 1,6
    GOSUB grafik
  ENDIF
  IF menu$(MENU(0))="  Stift 4"
    DEFLINE 1,8
    GOSUB grafik
  ENDIF
  IF menu$(MENU(0))="  Lîschen"
    ALERT 0,"Soll das Bild wirklich|gelîscht werden ?",1,"Nein|Ja",a%
    IF a%=2
      CLS
      SGET screen$
    ENDIF
  ENDIF
  '
  IF menu$(MENU(0))="  speichern"
    FILESELECT pfad$+"*."+ext$,"",name$
    GOSUB speichern(name$,screen$)
  ENDIF
  IF menu$(MENU(0))="  laden"
    FILESELECT pfad$+"*."+ext$,"",name$
    GOSUB laden(name$,screen$)
    SPUT screen$
  ENDIF
  '
  IF MENU(0)=30
    GOSUB funktions_parameter(exp%,cre,cim)
  ENDIF
  IF MENU(0)=31
    CLS
    GOSUB julia_spiel(exp%,cre,cim,komplex_ks())
    SGET screen$
  ENDIF
  IF MENU(0)=32
    GOSUB julia_kopierer(screen$,exp%,cre,cim,komplex_ks())
  ENDIF
  '
  MENU menu$()
  MENU OFF
RETURN
'
PROCEDURE global_set_up
  pfad$="\"
  decoder%(0)=0
  decoder%(1)=3
  decoder%(2)=2
  decoder%(3)=1
  komplex_ks(0,0)=-2
  komplex_ks(0,1)=-1.5
  komplex_ks(1,0)=2
  komplex_ks(1,1)=1.5
  CLS
  SGET screen$
  cre$="-1.6"
  cre=-1
  cim$="0"
  cim=0
  anz$="1"
  anz%=1
  exp$="2"
  exp%=2
RETURN
PROCEDURE init_transformation
  '
transformations_daten:
  ' data-Reihenfolge : a11,a12,a21,a22,b1,b2,xmin,ymin,xmax,ymax
  '
  ' Daten fÅr Koch-Kurve
  DATA 0.3333333,0,0,0.33333333,0,0
  DATA 0.3333333,0,0,0.33333333,0.6666666,0
  DATA 0.1666667,-0.28867,0.28867,0.16666667,0.3333333333,0
  DATA -0.1666667,0.28867,0.28867,0.16666667,0.6666666667,0
  DATA 0,0,1,0.5
  '
  ' Daten fÅr BlÅtenpflanzenblatt
  DATA 0.64987,-0.013,0.013,0.64987,0.175,0
  DATA 0.64948,-0.026,0.026,0.64948,0.165,0.325
  DATA 0.3182,-0.3182,0.3182,0.3182,0.2,0
  DATA -0.3182,0.3182,0.3182,0.3182,0.8,0
  DATA 0,0,1,1
  '
  ' Daten fÅr Farn
  DATA 0,0,0,0.17,0,0
  DATA 0.84962,0.0255,-0.0255,0.84962,0,3
  DATA -0.1554,0.235,0.19583,0.18648,0,1.2
  DATA 0.1554,-0.235,0.19583,0.18648,0,3
  DATA -10,0,10,20
  '
  ' Daten fÅr Sierpinski-Dreieck
  DATA 0.5,0,0,0.5,0,0
  DATA 0.5,0,0,0.5,0.5,0
  DATA 0.5,0,0,0.5,0.25,0.5
  DATA 0,0,1,1
  '
  RESTORE transformations_daten
  read_data(4,koch_a(),koch_b(),koch_ks())
  read_data(4,blatt_a(),blatt_b(),blatt_ks())
  read_data(4,farn_a(),farn_b(),farn_ks())
  read_data(3,sierp_a(),sierp_b(),sierp_ks())
RETURN
PROCEDURE read_data(nr%,VAR a(),b(),ks())
  LOCAL i%,j%,k%
  FOR i%=0 TO nr%-1
    FOR j%=0 TO 1
      FOR k%=0 TO 1
        READ a(i%,j%,k%)
      NEXT k%
    NEXT j%
    FOR j%=0 TO 1
      READ b(i%,j%)
    NEXT j%
  NEXT i%
  READ ks(0,0)
  READ ks(0,1)
  READ ks(1,0)
  READ ks(1,1)
RETURN
'
PROCEDURE laden(name$,VAR screen$)
  IF name$<>""
    OPEN "i",#1,name$
    d$=INPUT$(2,#1)
    FOR i%=0 TO 15
      hb%=ASC(INPUT$(1,#1))
      col%=ASC(INPUT$(1,#1))+256*hb%
      SETCOLOR i%,col%
    NEXT i%
    BGET #1,V:screen$,32000
    CLOSE #1
  ENDIF
RETURN
PROCEDURE speichern(name$,screen$)
  IF name$<>""
    HIDEM
    OPEN "o",#1,name$
    OUT #1,0
    OUT #1,res%
    FOR i%=0 TO 15
      OUT #1,PEEK(&HFF8240+2*i%) AND &H7
      OUT #1,PEEK(&HFF8240+2*i%+1) AND &H77
    NEXT i%
    BPUT #1,V:screen$,32000
    CLOSE #1
    SHOWM
  ENDIF
RETURN
PROCEDURE grafik
  DEFMOUSE 3
  SPUT screen$
  PAUSE 10
  REPEAT
    a$=INKEY$
    IF a$<>""
      col%=VAL(a$)
      COLOR col%
      DEFFILL col%
    ENDIF
    IF MOUSEK=1
      LINE MOUSEX,MOUSEY,MOUSEX+1,MOUSEY+1
    ENDIF
  UNTIL MOUSEK=2
  SGET screen$
  DEFMOUSE 0
  DEFLINE 1,2
RETURN
PROCEDURE fuellen
  REPEAT
  UNTIL MOUSEK=0
  DEFMOUSE 5
  SPUT screen$
  REPEAT
    IF MOUSEK=1
      FILL MOUSEX,MOUSEY
    ENDIF
  UNTIL MOUSEK=2
  SGET screen$
  DEFMOUSE 0
RETURN
' --------------------------------------------------------------------------
' Die Funktion NEXTPIXEL liefert die Farbe des nÑchsten gesetzten Bildpunkts
' und seine Bildschirmkoordinaten in x%,y%.
' Initialisierung mit x%=-1
' Kein weiterer Bildschirmpunkt mehr gesetzt, wenn y%>yres%
' --------------------------------------------------------------------------
PROCEDURE aufloesung_bestimmen
  res%=XBIOS(4)
  IF res%=2
    xres%=640
    yres%=400
    ext$="PI3"
  ELSE IF res%=1
    xres%=640
    yres%=200
    ext$="PI2"
  ELSE
    ALERT 3,"FRACTAL lÑuft nur|in mittlerer oder|hoher Auflîsung",1," OK ",dummy
    END
  ENDIF
RETURN
FUNCTION nextpixel(res%,screen$,VAR x%,y%)
  LOCAL col%
  IF y%<yres%
    IF res%=2
      ' Pixelbestimmung fÅr hohe Auflîsung
      col%=FN nextpixel_mono(screen$,x%,y%)
    ELSE
      ' Farbbestimmung fÅr mittlere Auflîsung
      col%=FN nextpixel_color(screen$,x%,y%)
    ENDIF
    RETURN col%
  ENDIF
ENDFUNC
FUNCTION nextpixel_mono(screen$,VAR x%,y%)
  LOCAL b%,w%,bit%
  b%=y%*80+(x% DIV 16)*2
  bit%=14-x% MOD 16
  IF x%<0
    bit%=15
  ENDIF
  w%=DPEEK(V:screen$+b%)
  WHILE (bit%>=0) AND NOT (BTST(w%,bit%))
    DEC bit%
  WEND
  IF bit%<0
    REPEAT
      ADD b%,2
    UNTIL (DPEEK(V:screen$+b%)<>0) OR (b%>32000)
    bit%=15
    w%=DPEEK(V:screen$+b%)
    WHILE (bit%>=0) AND NOT (BTST(w%,bit%))
      DEC bit%
    WEND
  ENDIF
  y%=DIV(b%,80)
  x%=(b%-y%*80)*8+15-bit%
  RETURN 1
ENDFUNC
FUNCTION nextpixel_color(screen$,VAR x%,y%)
  LOCAL b%,w1%,w2%,bit%,col%
  b%=y%*160+(x% DIV 16)*4
  w1%=DPEEK(V:screen$+b%)
  w2%=DPEEK(V:screen$+b%+2)
  bit%=14-x% MOD 16
  IF x%<0
    bit%=15
  ENDIF
  WHILE (bit%>=0) AND NOT (BTST(w1%,bit%) OR BTST(w2%,bit%))
    DEC bit%
  WEND
  IF bit%<0
    REPEAT
      b%=b%+4
    UNTIL DPEEK(V:screen$+b%)<>0 OR DPEEK(V:screen$+b%+2)<>0 OR b%>32000
    bit%=15
    w1%=DPEEK(V:screen$+b%)
    w2%=DPEEK(V:screen$+b%+2)
    WHILE (bit%>=0) AND NOT (BTST(w1%,bit%) OR BTST(w2%,bit%))
      DEC bit%
    WEND
  ENDIF
  y%=DIV(b%,160)
  x%=(b%-160*y%+4)*4-bit%-1
  col%=decoder%(-2*BTST(w1%,bit%)-BTST(w2%,bit%))
  RETURN col%
ENDFUNC
' --------------------------------------------------------------------------
'  Lineare affine Transformation :
'
'            Fi(x,y)=A*(x,y)+b   (Vektoriell)
'            i=1,...,nr%
'  Sichtbarer Ausschnitt entsprechend ks()
' ---------------------------------------------------------------------------
PROCEDURE chaos_spiel(nr%,VAR a(),b(),ks())
  LOCAL x_n,y_n,zufall,zufalls_zahl,zufall_cnt,x,y,cnt%,i%,detsum
  '
  '  Determinanten der einzelnen Transformationsmatrizen bestimmen
  detsum=0
  FOR i%=0 TO nr%-1
    det(i%)=ABS(a(i%,0,0)*a(i%,1,1)-a(i%,0,1)*a(i%,1,0)+0.01)
    detsum=detsum+det(i%)
  NEXT i%
  '
  ' Startwerte fÅr x und y wÑhlen (beliebig!)
  x=0.5
  y=0.5
  cnt%=0
  DEFMOUSE 2
  '
  ' Transformationen durchfÅhren, bis man keine Lust mehr hat
  WHILE INKEY$="" AND MOUSEK<>2
    '
    ' Eine Transformation mit gewichteter Wahrscheinlichkeit auswÑhlen
    zufalls_zahl=RND(0)
    zufall_cnt=0
    zufall=-1
    REPEAT
      INC zufall
      ADD zufall_cnt,det(zufall)/detsum
    UNTIL zufall_cnt>=zufalls_zahl OR zufall=nr%
    '
    ' Zufallszahl "zufall" aus [0 ... nr%-1] ausgewÑhlt
    '
    ' Transformation "zufall" ausrechnen
    x_n=a(zufall,0,0)*x+a(zufall,0,1)*y+b(zufall,0)
    y_n=a(zufall,1,0)*x+a(zufall,1,1)*y+b(zufall,1)
    x=x_n
    y=y_n
    IF cnt%>20
      PLOT INT((x-ks(0,0))*xres%/(ks(1,0)-ks(0,0))+0.5),yres%-1-INT((y-ks(0,1))*yres%/(ks(1,1)-ks(0,1))+0.5)
    ENDIF
    INC cnt%
  WEND
  DEFMOUSE 0
  ALERT 0,"Abbruch nach "+STR$(cnt%-100)+" Iterationen.  ",1," Menu ",dummy%
RETURN
PROCEDURE kopierer(nr%,VAR bild$,a(),b(),ks())
  LOCAL x%,y%      !Koordinaten des Ausgangsbildes in Pixel
  LOCAL x,y        !Koordinaten des Ausgangsbildes reell
  LOCAL x_,y_      !Transformierte Koordinaten, reell
  LOCAL x_%,y_%    !Transformierte Koordinaten, in Pixel
  CLS
  DEFMOUSE 2
  x%=-1    !Startwerte fÅr NEXTPIXEL
  y%=0
  '
  COLOR FN nextpixel(res%,bild$,x%,y%)
  WHILE y%<yres%
    '
    ' Pixelkoordinaten in reelle Koordinaten umrechnen
    x=(ks(1,0)-ks(0,0))/xres%*x%+ks(0,0)
    y=(ks(1,1)-ks(0,1))/yres%*(yres%-1-y%)+ks(0,1)
    FOR i%=0 TO nr%-1
      '
      ' Transformation durchfÅhren
      x_=a(i%,0,0)*x+a(i%,0,1)*y+b(i%,0)
      y_=a(i%,1,0)*x+a(i%,1,1)*y+b(i%,1)
      '
      ' x,y wieder in Pixelkoordinaten umrechnen
      x_%=INT((x_-ks(0,0))*xres%/(ks(1,0)-ks(0,0))+0.5)
      y_%=yres%-1-INT((y_-ks(0,1))*yres%/(ks(1,1)-ks(0,1))+0.5)
      PLOT x_%,y_%
    NEXT i%
    COLOR FN nextpixel(res%,bild$,x%,y%)
  WEND
  DEFMOUSE 0
  SGET bild$
RETURN
'
' --------------------------------------------------------------------------
' FÅhrt die Transformationen in der Komplexen Z-Ebene durch
' fÅr Funktionen der Art:
'            w = z^(exp%) + c
' durch Auflîsen in <exp%> verschiedene Wurzeln:
'            z(n+1) = (z(n)-c)^(1/exp%)
'
' Sichtbarar Ausschnitt entsprechend ks()
' ---------------------------------------------------------------------------
PROCEDURE julia_kopierer(VAR screen$,exp%,cre,cim,ks()) !Bildtransformation
  LOCAL i%,x,y,r,phi
  CLS
  DEFMOUSE 2
  x%=-1
  y%=0
  COLOR FN nextpixel(res%,screen$,x%,y%)
  WHILE y%<yres%
    ' Pixelkoordinaten in komplexe Koordinaten umrechnen
    x=(ks(1,0)-ks(0,0))/xres%*x%+ks(0,0)
    y=(ks(1,1)-ks(0,1))/yres%*(yres%-1-y%)+ks(0,1)
    '
    ' Transformation
    GOSUB recht_polar(x-cre,y-cim,r,phi)
    r=r^(1/exp%)
    phi=phi/exp%
    FOR i%=0 TO exp%-1
      GOSUB polar_recht(r,phi+i%/exp%*2*PI,x_,y_)
      '
      ' x,y wieder in Pixelkoordinaten umrechnen
      x_%=INT((x_-ks(0,0))*xres%/(ks(1,0)-ks(0,0))+0.5)
      y_%=yres%-1-INT((y_-ks(0,1))*yres%/(ks(1,1)-ks(0,1))+0.5)
      PLOT x_%,y_%
    NEXT i%
    COLOR FN nextpixel(res%,screen$,x%,y%)
  WEND
  DEFMOUSE 0
  SGET screen$
RETURN
PROCEDURE julia_spiel(exp%,cre,cim,VAR ks())            ! Chaos-Spiel
  LOCAL x_n,y_n,zufall,x,y
  CLS
  DEFMOUSE 2
  cnt%=0
  x=0.1
  y=0
  COLOR 1
  WHILE INKEY$="" AND MOUSEK<>2
    GOSUB recht_polar(x-cre,y-cim,r,phi)
    zufall=INT(exp%*RND(0)+0.5)
    polar_recht(r^(1/exp%),phi/exp%+zufall/exp%*2*PI,x,y)
    IF cnt%>100
      PLOT INT((x-ks(0,0))*xres%/(ks(1,0)-ks(0,0))+0.5),yres%-1-INT((y-ks(0,1))*yres%/(ks(1,1)-ks(0,1))+0.5)
    ENDIF
    INC cnt%
  WEND
  DEFMOUSE 0
  ALERT 0,"Abbruch nach "+STR$(cnt%-100)+" Iterationen.  ",1," Menu ",dummy%
RETURN
PROCEDURE funktions_parameter(VAR exp%,cre,cim)
  PRINT AT(2,2)
  PRINT "Exponent :";
  FORM INPUT 10 AS exp$
  PRINT "Real-Teil :";
  FORM INPUT 10 AS cre$
  PRINT "ImgainÑr-Teil :";
  FORM INPUT 10 AS cim$
  cre=VAL(cre$)
  cim=VAL(cim$)
  exp%=INT(VAL(exp$))
  SPUT screen$
RETURN
'
' Komplexe Funktionen
PROCEDURE recht_polar(re,im,VAR r,phi)
  r=SQR(im*im+re*re)
  IF re=0
    IF im>0
      phi=PI/2
    ELSE
      phi=-PI/2
    ENDIF
  ELSE
    phi=ATN(im/re)
    IF re<0
      IF im>=0
        phi=phi+PI
      ELSE
        phi=phi-PI
      ENDIF
    ENDIF
  ENDIF
RETURN
PROCEDURE polar_recht(r,phi,VAR re,im)
  IF phi>2*PI
    SUB phi,2*PI
  ENDIF
  re=r*COS(phi)
  im=r*SIN(phi)
RETURN
