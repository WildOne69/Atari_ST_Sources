' ***************************
' RFF Recursive File Find
' (c)1994 by MAXON-Computer
' Autor: Christoph Conrad
' ***************************
'
' 42 Files maximal auf einmal finden
' Maximale absolute Ordnertiefe 16
@rff.create(42,16)
'
' Suche alles in allen Ordnern
' Maximale relative Ordnertiefe 16
@rff.init("*.*",0,"*.*",16)
DO
  ' Startdirectory Wurzel aktuelles Laufwerk
  EXIT IF @rff.find("\")=0
  FOR count%=0 TO rff.fcount%-1
    ' alle bis jetzt gefundenen Files ausgeben
    IF BTST(rff.attrib|(count%),5)
      ' Nur Dateien mit gesetztem
      ' Archivbit ausgeben
      PRINT rff.pfname$(count%)
    ENDIF
  NEXT count%
LOOP
PRINT
' Gesamt gefundene Fileanzahl ausgeben
IF rff.fcountall%=0
  PRINT "Keine Dateien mit Muster ";rff.fpattern$
ELSE
  PRINT rff.fcountall%;" Dateien gefunden"
ENDIF
@rff.delete
> PROCEDURE rff.create(max.files|,max.depth|)
  ' Max. Files pro Aufruf @rff.find
  rff.max.files|=max.files|
  ' Max. Ordnerverschachtelungstiefe
  rff.max.depth|=max.depth|
  ' Gefundene Dateipfade: PathFileName
  DIM rff.pfname$(rff.max.files|-1)
  ' Gefundene Dateiattribute
  DIM rff.attrib|(rff.max.files|-1)
  ' DTA's
  DIM rff.dta|(43,rff.max.depth|-1)
  ' Pfade bei rekursiver Suche
  DIM rff.pname$(rff.max.depth|-1)
RETURN
> PROCEDURE rff.delete
  ' Aufr„umen
  ERASE rff.pfname$()
  ERASE rff.attrib|()
  ERASE rff.dta|()
  ERASE rff.pname$()
RETURN
> PROCEDURE rff.init(fpattern$,fattr&,dpattern$,max.reldepth|)
  ' Max. relative Suchtiefe
  rff.max.reldepth|=max.reldepth|
  ' sicherheitshalber depth auch auf Null
  rff.rec.depth|=0
  ' Anzahl gesamt gefundener Dateien
  rff.fcountall%=0
  rff.go.down!=FALSE
  ' Dateisuchmuster
  rff.fpattern$=fpattern$+CHR$(0)
  ' Dateiattribut
  rff.fattr&=fattr&
  ' Ordnersuchmuster
  rff.dpattern$=dpattern$+CHR$(0)
RETURN
> FUNCTION rff.find(path$)
'
' path$: Startpfad der Suche. Der erste "\" ist optional
' der letzte muss (!!) immer vorhanden sein
' Erlaubt sind also:
' "\"         == Suche ab Wurzel aktuelles Laufwerk
' "A:\"       == Suche ab Wurzel A:
' "BLABLA\"   == Suche ab Ordner "BLABLA" relativ zum Standardpfad
' "\BLABLA\"  == Suche ab Ordner "BLABLA" (auf der Wurzel)
'
' Globale Variablen, siehe Text
' rff.max.files|
' rff.max.depth|
' rff.last.depth|
' rff.max.reldepth|
' rff.rec.depth|
' rff.fcount%
' rff.go.up!
' rff.go.down!
' rff.old.dta%
' rff.dname$
' DIM rff.pfname$(rff.max.files|-1)
' DIM rff.dta|(43,rff.max.depth|-1)
' DIM rff.pname$(rff.max.depth|-1)
'
LOCAL dta%
'
INC rff.rec.depth|
IF rff.rec.depth|=1
  ' dta% mal als Z„hlervariable missbrauchen
  FOR dta%=0 TO rff.max.files|-1
    rff.pfname$(dta%)=""
  NEXT dta%
  ~FRE(0)
  rff.fcount%=0
  rff.go.up!=FALSE
  rff.old.dta%=FGETDTA()
ENDIF
'
dta%=V:rff.dta|(0,rff.rec.depth|-1)
~FSETDTA(dta%)                        ! lokalen DTA-Puffer setzen
'
IF rff.go.down!
  path$=rff.pname$(rff.rec.depth|-1)
  IF rff.last.depth|=rff.rec.depth|
    rff.go.down!=FALSE
    GOTO go.on
  ELSE
    rff.dname$=""
    GOTO go.down
  ENDIF
ELSE
  rff.last.depth|=rff.rec.depth|
  rff.pname$(rff.rec.depth|-1)=path$
ENDIF
'
' ~WIND_UPDATE(1)  ! BEG_UPDATE
rff.err%=FSFIRST(path$+rff.fpattern$,rff.fattr&)
' ~WIND_UPDATE(0)  ! END_UPDATE
WHILE rff.err%>=0
  rff.pfname$(rff.fcount%)=path$+CHAR{dta%+30}
  rff.attrib|(rff.fcount%)=BYTE{dta%+21}
  INC rff.fcount%
  INC rff.fcountall%
  IF rff.fcount%>=rff.max.files|
    rff.go.up!=TRUE
    GOTO go.up
  ENDIF
go.on:
  ' n„chste Datei suchen
  ' ~WIND_UPDATE(1)              ! BEG_UPDATE
  rff.err%=FSNEXT()
  ' ~WIND_UPDATE(0)              ! END_UPDATE
WEND
'
' Test, ob die maximale relative Ordnertiefe
' schon erreicht wurde.
IF rff.rec.depth|<=rff.max.reldepth|
  ' ersten Ordner suchen
  ' ~WIND_UPDATE(1)              ! BEG_UPDATE
  rff.err%=FSFIRST(path$+rff.dpattern$,16)
  ' ~WIND_UPDATE(0)              ! END_UPDATE
  WHILE rff.err%>=0
    ' Bei Attribut 16 werden auch
    '  normale Dateien gefunden
    IF BYTE{dta%+21}=16  ! Ordner ??
      rff.dname$=CHAR{dta%+30}
      IF rff.dname$<>"." AND rff.dname$<>".."
      go.down:
        ' Dann schauen wir mal einen Ordner tiefer
        ~@rff.find(path$+rff.dname$+"\")
        IF rff.go.up!
          GOTO go.up
        ENDIF
        ~FSETDTA(dta%)
      ENDIF
    ENDIF
    ' n„chsten Ordner suchen
    ' ~WIND_UPDATE(1)              ! BEG_UPDATE
    rff.err%=FSNEXT()
    ' ~WIND_UPDATE(0)              ! END_UPDATE
  WEND
ENDIF
'
go.up:
IF rff.rec.depth|=1
  rff.go.down!=TRUE
  ~FSETDTA(rff.old.dta%)
ENDIF
DEC rff.rec.depth|
RETURN rff.fcount%
ENDFUNC

