'
' ************* S H O R T C U T S **************
'
' komfortable Routine zum (auch nachtrÑglichen)
' Ermîglichen der Pull-Down-MenÅbedienung Åber
' TastenkÅrzel.
'
' Idee von M. Steinle, Implementation von
' R. Grothe und M. Steinle
'
' Programmiersprache: GFA-BASIC 3.XX
'
' (c) MAXON Computer GmbH 1990
'
' **********************************************
'
' Skizze des Rahmenprogramms:
'
' 1) RSC laden oder MenÅbaum mit MENU string$()
'    erzeugen
' 2) Objektindices zuweisen etc.
' 3) ZusÑtzlich zur bisherigen MenÅabfrage (mit
'    ON MENU GOSUB oder EVNT_MULTI() eine Tasta-
'    turabfrage einbauen (ON MENU KEY GOSUB
'    keymenu) bzw. entsprechende Maske fÅr
'    EVNT_MULTI())
' 4) MenÅ-Handler ggf. auf folgende Struktur um-
'    stricken:
'
PROCEDURE menu_handle(titel&,index&)
  SELECT index&
  CASE dieses&
    ' nun tun wir dies
  CASE jenes&
    ' nun tun wir jenes
  CASE auch_das_noch&
    ' nun tun wir auch das noch
  CASE etc&
    ' ...
  ENDSELECT
  ~MENU_TNORMAL(menu%,titel&,1)
  ' Titel wieder weiû machen
RETURN
'
'    wer ON MENU GOSUB menu benutzt, braucht
'    noch folgenden 'Durchlauferhitzer':
'
PROCEDURE menu
  menu%=MENU(-1)
  menu_handle(MENU(4),MENU(5))
RETURN
'
'
'
' Jetzt folgt die eigentliche Routine:
'
PROCEDURE keymenu      ! ggf. keymenu(menu%)
  '
  LOCAL scan&,state&,key_tabs%,dummy&,box&
  LOCAL titel&,i&,last_i!,ok!,last_box!
  '
  ' Die Routine verwendet als einzige globale
  ' Variable die Adresse des MenÅbaums 'menu%'.
  ' Sollte im Hauptprogramm ein anderer Name
  ' verwendet werden, muû er in den folgenden
  ' Zeilen angepaût werden. Die Adresse lieûe
  ' sich auch als Parameter Åbergeben, doch lieûe
  ' sich die Prozedur dann nicht in Verbindung
  ' mit den komfortablen ON XXX GOSUB ...-Befeh-
  ' len des GFA-Basic verwenden. Sollte der eine
  ' oder andere die Original-EVNT-Aufrufe be-
  ' nutzen, stellt die öbergabe als Parameter
  ' kein Problem dar. Weiterhin muû eine MenÅ-
  ' behandlungsprozedur namens
  ' MENU_HANDLE(titel,index) existieren, da diese
  ' bei Erfolg aufgerufen wird.
  '
  scan&=SHR&(GINTOUT(5),8) AND &HFF
  ' Scancode der gerade gedrÅckten Taste
  IF scan&>=&H78 AND scan&=<&H83
    SUB scan&,&H76
  ENDIF
  ' fÅr die Tasten <alt>'!' bis <alt>''' kommen
  ' eigene Scancodes (bloû wozu????????????????)
  state&=GINTOUT(4) AND &HF
  ' Status der Tastatur-Umschalttasten
  key_tabs%=XBIOS(16,L:-1,L:-1,L:-1)
  ' Adresse der Zeigertabelle fÅr die Umkodie-
  ' rungstabellen fÅr TastendrÅcke
  '
  ' In der folgenden CASE-Anweisung kînnen durch-
  ' aus eigene Suchzeichen eingesetzt werden. Die
  ' Tabelle darf auch erweitert werden! Die vor-
  ' geschlagenen Zeichen haben sich mittlerweile
  ' zu einer Art Standard entwickelt.
  ' Bei gedrÅckter 'Shift'-Taste wird die Shift-
  ' Konvertierungstabelle benutzt, sonst die
  ' Capslock-Tabelle. An der Adresse 'key_tabs'
  ' stehen die Adressen der drei Tabellen direkt
  ' hintereinander. Der Scancode dient auch dem
  ' Betriebssystem als Index in diese Tabellen.
  ' Daher machen wir's auch so.
  '
  SELECT state&
  CASE 1 TO 3                  ! 'Shift'
    code&=BYTE{scan&+{key_tabs%+4}}
    such$=CHR$(1)
    ' Pfeil nach oben
  CASE 4                       ! 'Control'
    code&=BYTE{scan&+{key_tabs%+8}}
    such$="^"
  CASE 5 TO 7                  ! 'Shift/Control'
    code&=BYTE{scan&+{key_tabs%+4}}
    such$=CHR$(1)+"^"
    ' Pfeil nach oben zuerst!
  CASE 8                       ! 'Alternate'
    code&=BYTE{scan&+{key_tabs%+8}}
    such$=CHR$(7)
    ' Window-Close-Box
  CASE 9 TO 11                 ! 'Shift/Alt'
    code&=BYTE{scan&+{key_tabs%+4}}
    such$=CHR$(1)+CHR$(7)
    ' Pfeil nach oben zuerst!
  DEFAULT
    such$=""
  ENDSELECT
  '
  ' die Suchroutine verlÑût sich auf die fest-
  ' gelegte und dokumentierte Struktur eines
  ' Pull-Down-MenÅs unter GEM. Jede MenÅzeile,
  ' die sich mit MENU_BAR() anmelden und verwal-
  ' ten lÑût, sollte diese Routine nicht aus dem
  ' Tritt bringen.
  '
  IF such$<>""                 ! was zu suchen?
    such$=" "+such$+CHR$(code&)! String komplett
    dummy&=OB_HEAD(menu%,0)
    ' Index des ersten Kinds des (Urroû-)mutter-
    ' objekts
    titel&=OB_HEAD(menu%,OB_HEAD(menu%,dummy&))
    ' Index des ersten Titels
    box&=OB_HEAD(menu%,OB_NEXT(menu%,dummy&))
    ' Index der ersten Klappbox
    ok!=FALSE                  ! bisher!
    REPEAT
      i&=OB_HEAD(menu%,box&)   ! erster Eintrag
      REPEAT
        IF OB_TYPE(menu%,i&)=28! STRING??
          '
          ' falls das aktuelle Objekt ein
          ' String-Objekt ist, wird der 'such$'
          ' darin gesucht.
          '
         ok!=INSTR(CHAR{OB_SPEC(menu%,i&)},such$)
        ENDIF
        IF ok!
          '
          ' falls ein MenÅstring mit der pas-
          ' senden Tastenkombination gefunden
          ' wurde, wird der zugehîrige MenÅtitel
          ' schwarz gemacht und der ganz normale
          ' MenÅ-Handler aufgerufen.
          '
         IF NOT BTST(OB_STATE(menu%,i&),3)
           ' Eintrag nicht gesperrt
           IF NOT BTST(OB_STATE(menu%,titel&),3)
             ' Titel auch nicht
              ~MENU_TNORMAL(menu%,titel&,0)
              ' Titel schwarz machen
              menu_handle(titel&,i&)
              ' normalen MenÅhandler anspringen
           ENDIF
         ENDIF
        ELSE
          '
          ' ÅberprÅfen, ob das aktuelle Objekt
          ' vielleicht das letzte Kind seines
          ' Mutterobjekts (seiner Klappbox) ist.
          ' Das ist genau dann der Fall, wenn
          ' OB_NEXT des aktuellen Objekts auf's
          ' Mutterobjekt 'zurÅck'zeigt.
          ' OB_TAIL des Mutterobjekts zeigt eh
          ' auf das letzte Kind. So kommt man zu
          ' folgender wundervollen Bedingung:
          '
    last_i!=(i&=OB_TAIL(menu%,OB_NEXT(menu%,i&)))
          IF NOT last_i!
            i&=OB_NEXT(menu%,i&)
          ENDIF
        ENDIF
      UNTIL ok! OR last_i!
      '
      ' ganz analog muû man darauf achten, die
      ' letzte Klappbox nicht zu verpassen:
      '
      last_box!=
        (box&=OB_TAIL(menu%,OB_NEXT(menu%,box&)))
      IF NOT last_box!
        box&=OB_NEXT(menu%,box&)
        ' zur nÑchsten Klappbox
        titel&=OB_NEXT(menu%,titel&)
        ' gleichzeitig zum nÑchsten Titel
      ENDIF
    UNTIL ok! OR last_box!
  ENDIF
RETURN

