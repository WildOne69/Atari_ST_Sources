Listing 2: Das Laden und EinfÅgen eines Icons in GFA-Basic 

' ************************************************************************
' **                                                                    **
' **                       ICON- Demonstration                          **
' **                            GFA-Basic                               **
' **                           Version 1.0                              **
' **                                                                    **
' **               Autor: Stefan Hîhn     Datum: 28.12.1989             **
' **                                                                    **
' ************************************************************************
'
appl_id=APPL_INIT()!                             bei AES anmelden
@resourcedefs !                                  Objektnummer definieren
@aes_defs !                                      allgemeine Definitionen
'
ret%=RSRC_LOAD("d:\insicn.rsc") !                Resource laden
IF ret%<>1 THEN !                                Fehler ist aufgetreten
  ret=APPL_EXIT() !                              bei AES abmelden
  END !                                          Programm beenden
ENDIF
~RSRC_GADDR(0,baum%,baum_adr%)!                  Baumadresse ermitteln
~FORM_CENTER(baum_adr%,x%,y%,w%,h%)!             Box zentrieren
'
@ins_icn("d:\test.dat",baum_adr%,icon%,icon1%)!  <--- Icon einfÅgen
IF icon1%=-1 THEN !                              Es hat nicht funktioniert
  ret=RSRC_FREE() !                              Resourcespeicher freigeben
  ret=APPL_EXIT()!                               bei Aes abmelden
  END !                                          Ende des Programms
ENDIF
PRINT "Adresse der Icondaten: ",HEX$(icon1%)
'
~OBJC_DRAW(baum_adr%,0,max_depth%,x%,y%,x%+w%,y%+h%) !   Dialogbox zeichnen
ret=FORM_DO(baum_adr%,0) !                       Bearbeiten
'
' Ab dieser Stelle darf die Dialogbox nicht mehr aufgerufen werden  !!!
~MFREE(icon1%) !                                 Freigeben des Icons
ret=RSRC_FREE() !                                Resource freigeben
~APPL_EXIT() !                                   bei AES abmelden
END
'
' **************************************************************************
' **                           INS_ICN                                    **
' ** Eingabe Name$:    Zu ladendes Icon                                   **
' **         Tree:     Adresse der Dialogbox                              **
' **         ob_index: Objektnummer des Objekts, das zum Icon werden soll **
' **         iconout:  Variable, in die die Adresse der Icondaten         **
' **                   geschrieben werden soll. RÅckgabewert              **
' **************************************************************************
'
PROCEDURE ins_icn(name$,tree%,ob_index%,VAR iconout%)
  LOCAL i% !               Schleifenvariable
  LOCAL icon_adr% !        Adresse des Iconblks
  LOCAL obj_adr%,in_ob% !  Adresse der Icon-Objektstruktur, Geladene ...
  LOCAL datamask_adr% !    Zeiger auf Daten und Maske des Icons
  LOCAL block_size% !      Grîûe von Daten und Maske
  LOCAL string_adr% !      Zeiger auf Text des Icons
  '
  iconout%=-1 !                   Bei Fehler wird eine -1 zurÅckgegeben
  in_ob%=MALLOC(object_len%) !    Speicher fÅr zu ladende Objektstruktur
  IF in_ob%=0 THEN !              Fehler aufgetreten
    GOTO proc_end0 !              zurÅck...
  ENDIF
  '
  string_adr%=MALLOC(200) !       Speicher fÅr Textstring anfordern
  IF string_adr%=0 THEN !         Fehler aufgetreten
    GOTO proc_end1 !              schon reservierten Speicher freigeben
  ENDIF
  '
  icon_adr%=MALLOC(iconblk_len%)! Speicher fÅr Iconblk anfordern
  IF icon_adr%=0 THEN !           Siehe Oben
    GOTO proc_end2
  ENDIF
  '
  OPEN "U",#1,name$ !                Datei îffnen
  BGET #1,icon_adr%,iconblk_len% !   Iconblk laden
  BGET #1,in_ob%,object_len% !       Objektstruktur laden
  block_size%=DPEEK(icon_adr%+22)/8*DPEEK(icon_adr%+24) !Data/Mask-Grîûe
  '
  LET datamask_adr%=MALLOC(2*block_size%) ! Speicher fÅr Data&Mask
  IF datamask_adr%=0 THEN !                 Fehler aufgetreten
    GOTO proc_end3 !                        siehe oben
  ENDIF
  '
  BGET #1,datamask_adr%,2*block_size% !    Data&Mask laden
  ' Der Rest ist der String am Ende der Datei
  str_len%=LOF(#1)-iconblk_len%-object_len%-2*block_size%-1
  FOR i%=0 TO str_len%
    BGET #1,string_adr%+i%,1 !          String einlesen
  NEXT i%
  '
  ' Speicher fÅr die gesamten Icondaten anfordern
  iconout%=MALLOC(iconblk_len%+2*block_size%+LEN(strin$)) 
  IF iconout%=0 THEN !                  Fehler aufgreten
    iconout%=-1!                        wieder auf -1 setzen
    GOTO proc_end4 !                    siehe oben
  ENDIF
  '
  ' Im folgenden werden die zwischengespeicherten Daten in einen gemeinsamen
  ' Block zusammenkopiert, so daû die einzelnen SpeicherbruchstÅcke frei-
  ' gegeben werden kînnen.
  '
  BMOVE icon_adr%,iconout%,iconblk_len%
  BMOVE datamask_adr%,iconout%+iconblk_len%,2*block_size%
  BMOVE string_adr%,iconout%+iconblk_len%+2*block_size%,str_len%
  '
  ' Nun werden die entsprechenden Zeiger in die Objekt- und Iconblkstruktur
  ' eingetragen.
  '
  obj_adr%=tree%+24*ob_index% !              Zeiger auf Objektstruktur
  LPOKE obj_adr%+12,iconout% !               Ob_spec -> Iconblk-Adresse
  DPOKE obj_adr%+20,DPEEK(in_ob%+20) !       ob_width Åbernehmen
  DPOKE obj_adr%+22,DPEEK(in_ob%+22) !       ob_height Åbernehmen
  DPOKE obj_adr%+8,DPEEK(in_ob%+8) !         ob_flags Åbernehmen
  DPOKE obj_adr%+10,DPEEK(in_ob%+10) !       ob_state Åbernehmen
  LPOKE iconout%,iconout%+iconblk_len%+block_size%! Zeiger auf Maske
  LPOKE iconout%+4,iconout%+iconblk_len%!    Zeiger auf Data
  LPOKE iconout%+8,string_adr%!              Stringzeiger
  '
  ' Das Freigeben der Speicherbereiche ist gestaffelt- jenachdem welcher
  ' Speicherbereich schon angefordert worden war.
  '
  proc_end4:
  ~MFREE(datamask_adr%)
  proc_end3:
  CLOSE #1 !                                Datei schlieûen
  ~MFREE(icon_adr%)
  proc_end2:
  ~MFREE(string_adr%)
  proc_end1:
  ~MFREE(in_ob%)
  proc_end0:
RETURN
'
' Definitionen der Dialogbox - kann durch Umarbeiten aus der
' '*.h'-Datei gewonnen werden
'
PROCEDURE resourcedefs
  baum%=0! Dialogboxnummer
  icon%=1! auszutauschendes Objekt
RETURN
'
' Definitionen fÅr die bessere Handhabung der AES-Routinen
'
PROCEDURE aes_defs
  max_depth%=7
  iconblk_len%=34
  object_len%=24
RETURN
