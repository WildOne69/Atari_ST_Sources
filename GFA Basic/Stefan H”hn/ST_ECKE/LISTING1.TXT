Listing 1: Das Laden und EinfÅgen eines Icons in Omikron.Basic 

 ' ************************************************************************
 ' **                                                                    **
 ' **                       ICON- Demonstration                          **
 ' **                          Omikron.Basic                             **               
 ' **                           Version 1.1                              **
 ' **                                                                    **
 ' **               Autor: Stefan Hîhn     Datum: 28.12.1989             **
 ' **                                                                    **
 ' ************************************************************************

 Appl_Init'                                     Bei AES anmelden
 Resourcedefs'                                  Objektnummer definieren
 Aes_Defs'                                      allgemeine Definitionen

 Rsrc_Load("insicn.rsc",X%)'                    Resource laden
 IF X%<>1 THEN '                                Fehler ist aufgetreten
   Appl_Exit'                                   bei AES abmelden
   END '                                        Programm beenden
 ENDIF

 Rsrc_Gaddr(0,Baum%,Baum_Adr%)'                 Adresse des Baums ermitteln
 Form_Center(Baum_Adr%,X%,Y%,W%,H%)'            Box zentrieren
 Ins_Icn("test.dat",Baum_Adr%,Icon%,Icon1%)'    <--- Icon einfÅgen
 IF Icon1%=-1 THEN '                            Es hat nicht funktioniert
    Rsrc_Free'                                  Resourcespeicher freigeben
    Appl_Exit'                                  bei Aes abmelden
    END '                                       Ende des Programms
 ENDIF

 Objc_Draw(0,Max_Depth%,X%,Y%,X%+W%,Y%+H%,Baum_Adr%)'   Dialogbox zeichnen
 Form_Do(0,Baum_Adr%,Ret%)'                     Bearbeiten

 ' Ab dieser Stelle darf die Dialogbox nicht mehr aufgerufen werden  !!!
 FRE (Icon1%)'                                  Freigeben des Icons
 Rsrc_Free'                                     Resource-Speicher freigeben
 Appl_Exit'                                     bei AES abmelden
 END

 '**************************************************************************
 '**                           INS_ICN                                    **
 '** Eingabe Name$:    Zu ladendes Icon                                   **
 '**         Tree:     Adresse der Dialogbox                              **
 '**         ob_index: Objektnummer des Objekts, das zum Icon werden soll **
 '**         iconout:  Variable, in die die Adresse der Icondaten         **
 '**                   geschrieben werden soll. RÅckgabewert              **
 '**************************************************************************
 DEF PROC Ins_Icn(Name$,Tree%,Ob_Index%,R Iconout%)

 LOCAL I%                       SchleifenzÑhler
 LOCAL Icon_Adr%'               Adresse des Iconblks
 LOCAL Obj_Adr%,In_Ob%'         Adresse der Icon-Objektstruktur, Geladene ...
 LOCAL Datamask_Adr%'           Zeiger auf Daten und Maske des Icons
 LOCAL Block_Size%'             Grîûe von Daten und Maske
 LOCAL String_Adr%'             Zeiger auf Text des Icons

 Iconout%=-1'                   Bei Fehler wird eine -1 zurÅckgegeben

 In_Ob%= MEMORY(Object_Len%)'   Speicher fÅr zu ladende Objektstruktur reservieren
 IF In_Ob%=0 THEN '             Fehler aufgetreten
    RETURN '                    zurÅck...
 ENDIF

 String_Adr%= MEMORY(200)'      ein wenig Speicher fÅr Textstring anfordern
 IF String_Adr%=0 THEN '        Fehler aufgetreten
    GOTO Proc_End1'             schon reservierten Speicherplatz freigeben
 ENDIF

 Icon_Adr%= MEMORY(Iconblk_Len%)'Speicher fÅr Iconblk anfordern
 IF Icon_Adr%=0 THEN '           Siehe Oben
    GOTO Proc_End2
    RETURN
 ENDIF

 OPEN "U",1,Name$'               Datei îffnen
 GET 1,Icon_Adr%,Iconblk_Len%'   Iconblk laden
 GET 1,In_Ob%,Object_Len%'       Objektstruktur laden
 Block_Size%= WPEEK(Icon_Adr%+22)/8* WPEEK(Icon_Adr%+24)'Grîûe von Daten berechn.

 Datamask_Adr%= MEMORY(2*Block_Size%)' Speicher fÅr Data&Mask anfordern
 IF Datamask_Adr%=0 THEN '             Fehler aufgetreten
    GOTO Proc_End3'                    siehe oben
 ENDIF
 GET 1,Datamask_Adr%,2*Block_Size%'    Data&Mask laden

 Str_Len%= LOF(1)-Iconblk_Len%-Object_Len%-2*Block_Size%-1' Der Rest ist String
 FOR I%=0 TO Str_Len%
    GET 1,String_Adr%+I%,1'            String einlesen
 NEXT I%

 Iconout%= MEMORY(Iconblk_Len%+2*Block_Size%+ LEN(Strin$))'Platz fÅr Gesamtblock
 IF Iconout%=0 THEN '                  Fehler aufgreten
    Iconout%=-1'                       wieder auf -1 setzen
    GOTO Proc_End4'                    siehe oben
 ENDIF

 ' Im folgenden werden die zwischengespeicherten Daten in einen gemeinsamen
 ' Block zusammenkopiert, so daû die einzelnen SpeicherbruchstÅcke frei-
 ' gegeben werden kînnen.

 MEMORY_MOVEB Icon_Adr%L,Iconblk_Len%L TO Iconout%L
 MEMORY_MOVEB Datamask_Adr%L,2*Block_Size%L TO Iconout%L+Iconblk_Len%L
 MEMORY_MOVEB String_Adr%L,Strlen%L+1 TO Icon_Out%L+Iconblk_Len%L+2*Block_Size%L

 'Nun werden die entsprechenden Zeiger in die Objekt- und Iconblkstruktur
 ' eingetragen.

  Obj_Adr%=Tree%+24*Ob_Index%'              Zeiger auf Objektstruktur
  LPOKE Obj_Adr%+12,Iconout%'               Ob_spec enthÑlt jetzt Iconblk-Adresse
  WPOKE Obj_Adr%+20, WPEEK(In_Ob%+20)'      ob_width Åbernehmen
  WPOKE Obj_Adr%+22, WPEEK(In_Ob%+22)'      ob_height Åbernehmen
  WPOKE Obj_Adr%+8, WPEEK(In_Ob%+8)'        ob_flags Åbernehmen
  WPOKE Obj_Adr%+10, WPEEK(In_Ob%+10)'      ob_state Åbernehmen
  LPOKE Iconout%,Iconout%+Iconblk_Len%+Block_Size%'Zeiger auf Maske
  LPOKE Iconout%+4,Iconout%+Iconblk_Len%'          Zeiger auf Data
  LPOKE Iconout%+8,String_Adr%:'Iconout+Iconblk_Len+2*Block_Size' Stringzeiger

 ' Das Freigeben der Speicherbereiche ist gestaffelt- jenachdem welcher
 ' Speicherbereich schon angefordert worden war.
-Proc_End4
  FRE (Datamask_Adr%)
-Proc_End3
  CLOSE 1'                                Datei schlieûen
  FRE (Icon_Adr%)
-Proc_End2
  FRE (String_Adr%)
-Proc_End1
  FRE (In_Ob%)
 RETURN


 ' Definitionen der Dialogbox - kann durch Umarbeiten aus der
 ' '*.h'-Datei gewonnen werden
 '
 DEF PROC Resourcedefs

 Baum%=0' Dialogboxnummer
 Icon%=1' auszutauschendes Objekt
 RETURN


 'Definitionen fÅr die bessere Handhabung der AES-Routinen
 '
 DEF PROC Aes_Defs

 Max_Depth%=7
 Iconblk_Len%=34
 Object_Len%=24
 RETURN

 ' Ab dieser Stelle wird die Gemlib eingebunden......
 
 END 'GEM Library fÅr OMIKRON-BASIC. Version 2.0. Auszug 28.12.89
 'Copyright (C) Artur Sîdler, Pforzheim & Thomas Kemp, Birkenfeld
 '
 'Zeile 64013: $f0,$f4,$f8 fÅr ACCESSORIES, $64,$6c,$7c fÅr APPLICATIONS
 'Zeile 64018: REMen fÅr ACCESSORIES
 '
 'SAVE SYSTEM LPEEK($EC)   ist fÅr MODUL-Interpreter angebracht.
 'AES
 '
 DEF PROC Appl_Init: LOCAL X%,Y%,W%,H%: DIM Ctrl%(12),Intin%(128),Addrout%(1)
    DIM Intout%(128),Ptsin%(1,128),Ptsout%(1,6),Addrin%(3),Global%(15)
    Wi_Pok1%=$64:Wi_Pok2%=$6C:Wi_Pok3%=$7C:Wi_Pok4%=Wi_Pok2%+8
    Mn_Selected%=10:Wm_Redraw%=20:Wm_Topped%=21:Wm_Closed%=22:Wm_Fulled%=23:Wm_Arrowed%=24
    Wm_Hslid%=25:Wm_Vslid%=26:Wm_Sized%=27:Wm_Moved%=28:Wm_Newtop%=29:Ac_Open%=40
    Ac_Close%=41:Mu_Keybd%=1:Mu_Button%=2:Mu_M1%=4:Mu_M2%=8:Mu_Mesag%=16:Mu_Timer%=32
    Appl_Exit:Graf_Handle(Ctrl%(6)): PRINT CHR$(27);"H"; CHR$(27);"H"; CHR$(27);"E"; CHR$(27);"f"; TAB (32);"OMIKRON - BASIC";:Graf_Mouse(0):V_Show_C(0)
    Wind_Get(0,4,X%,Y%,W%,H%):Form_Dial(0,X%,Y%,W%,H%):Form_Dial(3,X%,Y%,W%,H%)
    RETURN
 '
 DEF PROC Appl_Exit: LOCAL I%
    FOR I%=1 TO 10
       Wind_Delete(I%)
    NEXT I%
    Form_Dial(3,0,0,1,1):V_Clsvwk:Rsrc_Free
    Wind_Update(0):Wind_Update(2):Menu_Bar
    Graf_Handle(Ctrl%(6)):V_Hide_C: CLIP : PRINT CHR$(27);"H"; CHR$(27);"H"; CHR$(27);"e"; CHR$(27);"E";: RETURN 'CLIP  n i c h t  herausnehmen!!! (Anm. des Programmierers, er weiû warum!)
 '
 DEF PROC Menu_Bar(X%)
    Menu_Bar:Menu_Bar%=X%:Addrin%(0)=X%:Intin%(0)=1
    LPOKE Wi_Pok4%, LPEEK(Wi_Pok4%) OR 1 SHL 30
    AES (30,Global%(15),Intin%(1),Addrin%(1),Intout%(1),Addrout%(0))
    RETURN
 DEF PROC Menu_Bar
    Intin%(0)=0:Addrin%(0)=Menu_Bar%
    IF FN Wind_Chek%(30,8) THEN
       LPOKE Wi_Pok4%, LPEEK(Wi_Pok4%) XOR 1 SHL 30
       AES (30,Global%(15),Intin%(1),Addrin%(1),Intout%(1),Addrout%(0))
    ENDIF Menu_Bar%=0: RETURN
 '
 DEF PROC Objc_Draw(Intin%(0),Intin%(1),Intin%(2),Intin%(3),Intin%(4),Intin%(5),Addrin%(0))
    AES (42,Global%(15),Intin%(6),Addrin%(1),Intout%(1),Addrout%(0))
    RETURN
 '
 DEF PROC Form_Do(Intin%(0),Addrin%(0),R Intout%(0))
    AES (50,Global%(15),Intin%(1),Addrin%(1),Intout%(1),Addrout%(0))
    RETURN
 '
 DEF PROC Form_Dial(X%,Intin%(5),Intin%(6),Intin%(7),Intin%(8))
    IF X%=0 THEN IF FN Wind_Chek%(29,0) THEN RETURN ELSE LPOKE Wi_Pok2%, LPEEK(Wi_Pok2%) OR 1 SHL 29
    IF X%=3 THEN IF FN Wind_Chek%(29,0) THEN LPOKE Wi_Pok2%, LPEEK(Wi_Pok2%) XOR 1 SHL 29 ELSE RETURN
    Intin%(1)=Intin%(5)+Intin%(7) SHR 1:Intin%(3)=1:Intin%(0)=X%
    Intin%(2)=Intin%(6)+Intin%(8) SHR 1:Intin%(4)=1
    AES (51,Global%(15),Intin%(9),Addrin%(0),Intout%(1),Addrout%(0))
   RETURN
 '
 DEF PROC Form_Center(Addrin%(0),R Intout%(1),R Intout%(2),R Intout%(3),R Intout%(4))
    AES (54,Global%(15),Intin%(0),Addrin%(1),Intout%(5),Addrout%(0))
    RETURN
 '
 IF TIMER THEN DEF PROC Graf_Handle(R Intout%(0),R Intout%(1),R Intout%(2),R Intout%(3),R Intout%(4)) ELSE DEF PROC Graf_Handle(R Intout%(0))
    AES (77,Global%(15),Intin%(0),Addrin%(0),Intout%(5),Addrout%(0))
    RETURN
 '
 DEF PROC Graf_Mouse(X%,Y%,W%,H%,T%): LOCAL I%
    IF Graf_Mouse%=0 THEN Graf_Mouse%= MEMORY(74)
    T%= LPEEK(T%)+ LPEEK( SEGPTR +20):Intin%(0)=255
    WPOKE Graf_Mouse%,X%: WPOKE Graf_Mouse%+2,Y%: WPOKE Graf_Mouse%+4,0
    WPOKE Graf_Mouse%+6,W%: WPOKE Graf_Mouse%+8,H%
    FOR I%=0 TO 62 STEP 2: WPOKE Graf_Mouse%+10+I%, WPEEK(T%+I%): NEXT
    Addrin%(0)=Graf_Mouse%
    AES (78,Global%(15),Intin%(1),Addrin%(1),Intout%(1),Addrout%(0))
    RETURN
 DEF PROC Graf_Mouse(Intin%(0))
    AES (78,Global%(15),Intin%(1),Addrin%(1),Intout%(1),Addrout%(0))
    RETURN
 '
 DEF FN Wind_Chek%(W%,H%)
    IF LPEEK(Wi_Pok3%) THEN LPOKE Wi_Pok2%,0: LPOKE Wi_Pok4%,0: LPOKE Wi_Pok3%,0: LPOKE Wi_Pok1%,0
    IF W%<1 THEN RETURN 0
    RETURN BIT(W%, LPEEK(Wi_Pok2%+H%))
 '
 DEF PROC Wind_Close(W%)
    IF FN Wind_Chek%(W%,8) THEN
       LPOKE Wi_Pok4%, LPEEK(Wi_Pok4%) XOR 1 SHL W%:Intin%(0)=W%
       AES (102,Global%(15),Intin%(1),Addrin%(0),Intout%(1),Addrout%(0))
    ENDIF RETURN
 '
 DEF PROC Wind_Delete(W%):Wind_Close(W%)
    IF FN Wind_Chek%(W%,0) THEN
       LPOKE Wi_Pok2%, LPEEK(Wi_Pok2%) XOR 1 SHL W%:Intin%(0)=W%
       AES (103,Global%(15),Intin%(1),Addrin%(0),Intout%(1),Addrout%(0))
    ENDIF RETURN
 '
 DEF PROC Wind_Get(Intin%(0),Intin%(1),R Intout%(1))
    IF FN Wind_Chek%(Intin%(0),0)=0 AND Intin%(1)<>10 THEN RETURN
    AES (104,Global%(15),Intin%(2),Addrin%(0),Intout%(5),Addrout%(0))
    RETURN
 DEF PROC Wind_Get(Intin%(0),Intin%(1),R Intout%(1),R Intout%(2),R Intout%(3),R Intout%(4))
    IF FN Wind_Chek%(Intin%(0),0)=0 AND Intin%(0) THEN RETURN
    AES (104,Global%(15),Intin%(2),Addrin%(0),Intout%(5),Addrout%(0))
    RETURN
 '
 DEF PROC Wind_Update(X%):Intin%(0)=X%
    IF X%=0 THEN IF FN Wind_Chek%(30,0)=0 THEN RETURN ELSE LPOKE Wi_Pok2%, LPEEK(Wi_Pok2%) XOR 1 SHL 30
    IF X%=1 THEN IF FN Wind_Chek%(30,0) THEN RETURN ELSE LPOKE Wi_Pok2%, LPEEK(Wi_Pok2%) XOR 1 SHL 30
    IF X%=2 THEN IF FN Wind_Chek%(31,0)=0 THEN RETURN ELSE LPOKE Wi_Pok2%, LPEEK(Wi_Pok2%) XOR 1 SHL 31
    IF X%=3 THEN IF FN Wind_Chek%(31,0) THEN RETURN ELSE LPOKE Wi_Pok2%, LPEEK(Wi_Pok2%) XOR 1 SHL 31
    AES (107,Global%(15),Intin%(1),Addrin%(0),Intout%(1),Addrout%(0))
    RETURN
'
 DEF PROC Rsrc_Load(Text$,R Intout%(0)):Text$=Text$+ CHR$(0)
    Rsrc_Free:Addrin%(0)= LPEEK( VARPTR(Text$))+ LPEEK( SEGPTR +28)
    AES (110,Global%(15),Intin%(0),Addrin%(1),Intout%(1),Addrout%(0))
    LPOKE Wi_Pok1%,Global%(5) SHL 16 OR Global%(6)
    RETURN
 '
 DEF PROC Rsrc_Free
    IF LPEEK(Wi_Pok3%) THEN LPOKE Wi_Pok2%,0: LPOKE Wi_Pok4%,0: LPOKE Wi_Pok3%,0: LPOKE Wi_Pok1%,0
    IF LPEEK(Wi_Pok1%) THEN
       Global%(5)= WPEEK(Wi_Pok1%):Global%(6)= LOW( LPEEK(Wi_Pok1%)): LPOKE Wi_Pok1%,0
       AES (111,Global%(15),Intin%(0),Addrin%(0),Intout%(1),Addrout%(0))
    ENDIF RETURN
 '
 DEF PROC Rsrc_Gaddr(Intin%(0),Intin%(1),R Addrout%(0))
    AES (112,Global%(15),Intin%(2),Addrin%(0),Intout%(1),Addrout%(1))
    RETURN
 '
 'VDI
 '
 DEF PROC Vsin_Mode(Intin%(0),Intin%(1))
    VDI (33,Ctrl%(12),Intin%(2),Ptsin%(0,0),Intout%(1),Ptsout%(0,0))
    RETURN
 '
 DEF PROC V_Opnvwk
    V_Opnvwk(1,1,1,1,1,1,1,1,1,1,2)
    RETURN
 DEF PROC V_Opnvwk(Intin%(0),Intin%(1),Intin%(2),Intin%(3),Intin%(4),Intin%(5),Intin%(6),Intin%(7),Intin%(8),Intin%(9),Intin%(10))
    VDI (100,Ctrl%(12),Intin%(11),Ptsin%(0,0),Intout%(45),Ptsout%(0,6))
    RETURN
'
 DEF PROC V_Clsvwk
    VDI (101,Ctrl%(12),Intin%(0),Ptsin%(0,0),Intout%(0),Ptsout%(0,0))
    RETURN
'
 IF TIMER THEN DEF PROC V_Show_C(Intin%(0)) ELSE DEF PROC V_Show_C:Intin%(0)=0
    VDI (122,Ctrl%(12),Intin%(1),Ptsin%(0,0),Intout%(0),Ptsout%(0,0))
    RETURN
 '
 DEF PROC V_Hide_C
    VDI (123,Ctrl%(12),Intin%(0),Ptsin%(0,0),Intout%(0),Ptsout%(0,0))
    RETURN

