; ***************************
; * Cartridge-Test-Programm *
; *    geschrieben von      *
; *   Christian Roth u.     *
; *    Matthias Brust       *
; *   Assembler: Profimat   *
; *  (c) 20.6.92 by MAXON   *
; ***************************

loop:    move.l #ask,d0   ;Eingabestring
         jsr print        ;printen
         move.w #1,-(sp)  ;Auf Taste
         trap #1          ;warten
         addq.l #2,sp
         cmp.w #$1B,d0    ;bei ESC
         beq.s tschau     ;TschÅss...
         sub.l #'0',d0    ;ASCII->Zahl
         and.l #7,d0      ;nur 3 Bits
         jsr test         ;Programme testen
         bra loop         ;wieder von vorn
tschau:  clr.w -(sp)      ;Auf
         trap #1          ;Wiedersehen

print:   move.l d0,-(sp)  ;Stringadresse
         move.w #9,-(sp)  ;holen und
         trap #1          ;String
         addq.l #6,sp     ;printen
         rts              ;zurÅck

; Hier folgt das eigentliche Cartridge-
; Test-Programm, es entspricht weit-
; gehend dem TOS-Test-Programm

test:    lea base,a0      ;magische Zahl
         cmp.l #$ABCDEF42,(a0)+ ;vergleichen
         bne.s back       ;TschÅss...
initbit: btst d0,4(a0)    ;Init-Bit gesetzt?
         beq.s  no_init   ;sonst => no_init
         movem.l d0-a6,-(sp) ;Register retten
         move.l 4(a0),a0  ;PGM-Adr. holen
         jsr (a0)         ;PGM initialisieren
         movem.l (sp)+,d0-a6 ;Regs zurÅckholen
no_init: tst.l (a0)       ;gibts noch ein PGM
         move.l (a0),a0   ;Adr. eintragen
         bne initbit      ;das Spiel wiederholen
back:    rts              ;sonst TschÅss...

; Wenn das Programm getestet wurde und einwand-
; frei funktioniert, mÅssen Sie alles, was nicht
; zum unteren Programmteil gehîrt lîschen und bei
; folgender Zeile das Kommentarzeichen ent-
; fernen, bevor Sie das PGM brennen.
;        org $FA0000

base:    dc.l $ABCDEF42        ;magische Zahl
head_1:  dc.l head_2           ;Zeiger auf 2. Header
         dc.l init_1+$8000000  ;Zeiger auf Init +
                               ;Bit 27 setzen
         dc.l begin_1          ;Startadresse PGM
         dc.w 0                ;Zeit
         dc.w 0                ;Datum
         dc.l end_1-begin_1    ;LÑnge des PGM
         dc.b 'ZUM_BSP1.PRG',0 ;Name des PGM
         align.l               ;auf gerade
                               ;Adresse bringen
head_2:  dc.l head_3           ;s.o
         dc.l init_2+$4000000  ;Bit 26 setzen
         dc.l begin_2          ;...
         dc.w 0
         dc.w 0
         dc.l end_2-begin_2
         dc.b 'ZUM_BSP2.PRG',0
         align.l

head_3:  dc.l 0                ;kein Header mehr
         dc.l init_3+$8000000  ;Bit 27 setzen +
         dc.l begin_3          ;gleiches Init-PGM
         dc.w 0                ;wie bei PGM 1
         dc.w 0                ;...
         dc.l end_3-begin_3
         dc.b 'ZUM_BSP3.PRG',0
         align.l

init_1:  move.l #init_txt,d0   ;Init-Text
         jsr print             ;printen
         move.l #head_1+20,d0  ;PGM-Name
         jsr print             ;printen
         rts

init_2:  move.l #init_txt,d0   ;...
         jsr print
         move.l #head_2+20,d0
         jsr print
         rts

init_3:  move.l #init_txt,d0
         jsr print
         move.l #head_3+20,d0
         jsr print
         rts

begin_1: rts    ;Hier steht das richtige PGM
end_1:

begin_2: rts
end_2:

begin_3: rts
end_3:

ask:     dc.b 13,10
         dc.b 'Welches Init-Bit soll gesetzt sein? (0-7, ESC=Exit) ',0
init_txt: dc.b 13,10,'Initialisiere Programm ',0
         end

