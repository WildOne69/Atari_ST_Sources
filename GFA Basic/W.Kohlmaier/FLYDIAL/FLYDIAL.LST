' * * * * * * * * * * * * * * * * * *
' *
' * FLYING DIAL's in GFA BASIC V3.0
' *
' * Autor: W.Kohlmaier  4/1991
' *
' *(c) 1991  MAXON Computer GmbH
' *
' * * * * * * * * * * * * * * * * * *
'
' Resourcenamen wÑhlen....
FILESELECT "\*.RSC","",resource$
'
'
' Resource laden
~RSRC_LOAD(resource$)
'
'
baum%=0 ! Adresse von Baum=0 erfragen
~RSRC_GADDR(0,baum%,adresse%)
'
'
'
' ----------- Demonstration einer 'FLY DIAL' Version in GFA BASIC ------------
'
wx&=32  ! X Koordinate wo Dialogbox erscheinen soll
wy&=32  ! Y Koordinate wo Dialogbox erscheinen soll
'
'
'
~@form_do(adresse%,0,wx&,wy&)     ! die neue FORM_DO Routine
'
'
'
' Resource Speicher wieder freigeben
~RSRC_FREE()
'
END
'
' ------- Funktionen und Proceduren
'
'
FUNCTION form_do(tree%,start%,VAR x&,y&)
  '
  LOCAL form&,d&,w&,h& ! lokale Variablen
  LOCAL rx&,ry&        ! Dummy-Variablen um Verschiebung zu testen
  LOCAL puffer$        ! rettet Bildschirmausschnitt in Puffer$
  LOCAL wrk_x,wrk_y    ! maximale X-,Y- Bildschirmkoordinaten
  '
  '
  wrk_x=WORK_OUT(0)    ! ermittelt Åber VDI die max. GerÑtekoordinaten
  wrk_y=WORK_OUT(1)
  '
  sicher_rand=64   ! Sicherheitszone vor dem Hinausschieben
  mover_dim=16     ! Grîûe des MOVER Zeichen
  '
  ' ---------------- Dialogbox zeichnen -------------------
  '
  '
  ~WIND_UPDATE(3)  ! Kontrolle an Dialogbox abgeben
  '
  '
  ' Wenn globale X& + Y& Variable verwendet werden um die Dialogboxkoordinaten
  ' zu puffern werdfen diese hier auch verwendet.
  '
  IF x&>0 OR y&>0       ! wenn öbergabekoordinaten <>0 dann x& y& verwenden...
    '
    ~FORM_CENTER(tree%,d&,d&,w&,h&)  ! nur w& und h& erfragen
    OB_X(tree%,0)=x&    ! Dialogbox an x& Wert setzen
    OB_Y(tree%,0)=y&    !      -       y&      -
    '
  ELSE                  ! ...sonst Zentrieren
    '
    ~FORM_CENTER(tree%,x&,y&,w&,h&)
    '
  ENDIF
  '
  ' Ausschnitt puffern
  GET MAX(0,x&-4),MAX(0,y&-4),MIN(wrk_x,x&+w&+4),MIN(wrk_y,y&+h&+4),puffer$
  '
  '
  ' Der Trick wieso alles funktioniert...
  ' Den Basisrahmen der Dialogbox = Objekt 0 als TOUCHEXIT definieren.
  ' Aus diesem Grund kann die Box verlassen werden wenn die 'MOVE'-Ecke
  ' angeklickt wird.
  '
  '
  objnull=0
  touch_exit=&H40
  OB_FLAGS(tree%,objnull)=OB_FLAGS(tree%,objnull) OR touch_exit  ! Objekt 0 der Box als TOUCHEXIT definieren
  '
  '
  ' ~FORM_DIAL(1,0,0,0,0,x&,y&,w&,h&) ! eventuell Dialogauschnitt anmelden
  '
  '
  ' Dialogbox mit 'MOVE'-Eck zeichnen
  form_draw
  '
  '
  ' ---------------- Beginn der eigentlichen FORM_DO Routine -------
  '
  '
  DO
    '
    ' Dies ist der Standard FORM_DO Aufruf des AES
    form&=FORM_DO(tree%,start%)
    '
    '
    ' Schleife verlasssen wenn ein Objekt grîûer als 0 angeklickt wurde...
    ' 'AND &HFF' filtert den Doppelklick heraus
    '
    EXIT IF (form& AND &HFF)<>0 ! Ñndern !!!!!!
    '
    ' wenn das Objekt =0 gewÑhlt wurde
    ' dann Verschiebung beginnen
    '
    '
    rx&=x& ! alte x Koordinaten puffern
    ry&=y& !  -   y   -
    '
    '
    IF MOUSEX<=mover_dim AND MOUSEY<=mover_dim  ! wenn Maus innerhalb des MOVE-Zeichens
      IF BTST(form&,31)
        ' Wenn Doppelklick dann Dialogbox zentrieren
        '
        ~FORM_CENTER(tree%,x&,y&,w&,h&)
        '
      ELSE
        ' ...sonst Rahmen verschieben
        '
        DEFMOUSE 4 ! Mausform auf flache Hand schalten
        '
        ' Der Wert '22' sperrt die Verschiebung in die Menuleiste
        ' kann bei Bedarf auf Null gesetz werden
        '
        ' sicher_rand bestimmt die Grîûe des minimal sichtbaren Anteiles der
        ' Dialogbox, bei Verschiebung nach rechts unten.
        '
        ~GRAF_DRAGBOX(OB_W(tree%,0),OB_H(tree%,0),OB_X(tree%,0),OB_Y(tree%,0),4,22,wrk_x+OB_W(tree%,0)-sicher_rand,wrk_y+OB_H(tree%,0)-sicher_rand,x&,y&)
        '
        DEFMOUSE 0 ! Mausform auf Pfeil retour
        '
      ENDIF
    ENDIF
    '
    '
    '
    IF x&<>rx& OR y&<>ry&
      ' wenn tatsÑchlich eine Verschiebung erfolgte...
      '
      ' alten Ausschnitt restaurieren...
      PUT rx&-4,ry&-4,puffer$
      '
      ' ... und neuen Ausschnitt puffern
      GET MAX(0,x&-4),MAX(0,y&-4),MIN(wrk_x,x&+w&+4),MIN(wrk_y,y&+h&+4),puffer$
      '
      ' neue Dialogkoordinaten festsetzen
      OB_X(tree%,0)=x&    ! Dialogbox an neuen x& Wert setzen
      OB_Y(tree%,0)=y&    !      -       neuen y&      -
      '
      ' Dialogbox mit 'MOVE'-Eck neuzeichnen
      form_draw
      '
    ENDIF
    '
    '
  LOOP
  '
  OB_STATE(tree%,form& AND &HFF)=OB_STATE(tree%,form& AND &HFF) AND &X1111111111111110
  ' ---------  FORM_DO verlassen  ---------------
  '
  '
  PUT x&-4,y&-4,puffer$ ! Bildschirm restaurieren
  '
  '
  ' ~FORM_DIAL(3,0,0,0,0,x&,y&,w&,h&) ! ev. Redraw-Meldung ans System schicken
  '
  '
  ~WIND_UPDATE(2)  ! Kontrolle ans AES zurÅckgeben
  '
  ' gibt die Nummer des Objektes, Åber welches die Dialogbox verlassen wurde
  ' als RÅckgabewert zurÅck
  RETURN form&
  '
  '
ENDFUNC
'
'
PROCEDURE form_draw
  LOCAL m
  '
  ' Diese Procedure zeichnet die Dialogbox und das 'MOVE' Eck links oben
  '
  '
  ' Grafik Nullpunkt auf linke, obere Ecke der Dialogbox setzen
  CLIP  OFFSET OB_X(tree%,0),OB_Y(tree%,0)
  '
  ' Dialogbox zeichnen
  ~OBJC_DRAW(tree%,0,4,x&-4,y&-4,w&+4,h&+4)
  '
  '
  GRAPHMODE 1          ! Grafikmodus auf Åberschreiben setzen
  DEFFILL 1,0          ! weiûes FÅllmuster wÑhlen
  '
  m=mover_dim
  '
  PBOX 0,0,m,m     ! zeichnet den Winkel ins Eck
  DRAW 0,m TO m,0
  '
  SUB m,2
  DRAW 0,m TO m,0
  '
RETURN
