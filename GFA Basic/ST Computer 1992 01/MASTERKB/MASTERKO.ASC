 '****************************
 '*      MASTERKEYBOARD      *
 '*        Simulation        *
 '*   OMIKRON-BASIC LISTING  *
 '*  (c) 1992 MAXON Computer *
 '****************************

 'STATUSBYTES - (HIGH Nibble)
  Note_Off%L=$8:Note_On%L=$9:After_Touch%L=$D:Pitch_Bend%L=$E

  Ja%L=-1:Nein%L=0

  N_Bereiche%L=2:'3 Bereiche (einschliesslich Null)
  DIM Bereich_Anfang%L(N_Bereiche%L),Bereich_Ende%L(N_Bereiche%L)
  DIM Ausgabekanal%L(N_Bereiche%L),Transpose%L(N_Bereiche%L)
  DIM After_Touch_Zugelassen%L(N_Bereiche%L)
  DIM Pitch_Bend_Zugelassen%L(N_Bereiche%L)
  DIM Velocity_Faktor%L(N_Bereiche%L)

 '****************************************
 '* Parameter fÅr die Keyboardaufteilung *
 '****************************************

 'Beispiel
 'Erster Bereich
  Bereich_Anfang%L(0)=36:Bereich_Ende%L(0)=59:Ausgabekanal%L(0)=0:Transpose%L(0)=0
  Velocity_Faktor%L(0)=100
  After_Touch_Zugelassen%L(0)=Ja%L
  Pitch_Bend_Zugelassen%L(0)=Ja%L

 'Zweiter Bereich
  Bereich_Anfang%L(1)=60:Bereich_Ende%L(1)=96:Ausgabekanal%L(1)=1:Transpose%L(1)=-12
  Velocity_Faktor%L(1)=70
  After_Touch_Zugelassen%L(1)=Nein%L
  Pitch_Bend_Zugelassen%L(1)=Nein%L

 'Dritter Bereich
  Bereich_Anfang%L(2)=36:Bereich_Ende%L(2)=96:Ausgabekanal%L(2)=11:Transpose%L(2)=12
  Velocity_Faktor%L(2)=50
  After_Touch_Zugelassen%L(2)=Nein%L
  Pitch_Bend_Zugelassen%L(2)=Nein%L

 REPEAT
   REPEAT
     BIOS (Gesendet%L,1,3)
     IF INKEY$ <>"" THEN Programmende
   UNTIL Gesendet%L:'Wenn ein Midi-Byte anliegt geht's weiter

   Lese_Midibyte

   Statusbyte%L=Byte%L\16:'HIGH Nibble isolieren

   IF Statusbyte%L=Note_On%L OR Statusbyte%L=Note_Off%L THEN
      Lese_Datenbyte
      Notennummer%L=Byte%L
      Lese_Datenbyte
      Velocity%L=Byte%L
      FOR I%L=0 TO N_Bereiche%L
        IF Notennummer%L>=Bereich_Anfang%L(I%L) AND Notennummer%L<=Bereich_Ende%L(I%L) THEN
           BIOS (,3,3,Statusbyte%L*16+Ausgabekanal%L(I%L))
           BIOS (,3,3,Notennummer%L+Transpose%L(I%L))
           BIOS (,3,3,(Velocity%L/100)*Velocity_Faktor%L(I%L))
        ENDIF
      NEXT
   ENDIF

   IF Statusbyte%L=After_Touch%L THEN
      Lese_Datenbyte
      FOR I%L=0 TO N_Bereiche%L
        IF After_Touch_Zugelassen%L(I%L) THEN
           BIOS (,3,3,Statusbyte%L*16+Ausgabekanal%L(I%L)
           BIOS (,3,3,Byte%L)
        ENDIF
      NEXT
   ENDIF

   IF Statusbyte%L=Pitch_Bend%L THEN
      Lese_Datenbyte
      L_Byte%L=Byte%L
      Lese_Datenbyte
      H_Byte%L=Byte%L
      FOR I%L=0 TO N_Bereiche%L
        IF Pitch_Bend_Zugelassen%L(I%L) THEN
           BIOS (,3,3,Statusbyte%L*16+Ausgabekanal%L(I%L)
           BIOS (,3,3,L_Byte%L)
           BIOS (,3,3,H_Byte%L)
        ENDIF
      NEXT
   ENDIF

 UNTIL INKEY$ <>""

 Programmende

 DEF PROC Programmende
   END
 RETURN

 DEF PROC Lese_Midibyte
   BIOS (R%L,2,3):'Ein Byte vom Midiport einlesen
   Byte%L=R%L+256:'weil die BIOS-Funktion einen negativen Wert ausgibt
 RETURN

 DEF PROC Lese_Datenbyte
   REPEAT
     Lese_Midibyte
   UNTIL Byte%L<128:'Eventuelle Echtzeitmeldungen ausfiltern
 RETURN

