' ***************************
' *      MASTERKEYBOARD     *
' *        Simulation       *
' *    GFA-BASIC-Listing    *
' * (c) 1992 MAXON Computer *
' ***************************
'
' STATUSBYTES - (HIGH Nibble)
note_off%=&H8
note_on%=&H9
after_touch%=&HD
pitch_bend%=&HE
'
ja%=-1
nein%=0
'
n_bereiche%=2 !3 Bereiche (einschliesslich Null)
DIM bereich_anfang%(n_bereiche%),bereich_ende%(n_bereiche%)
DIM ausgabekanal%(n_bereiche%),transpose%(n_bereiche%)
DIM after_touch_zugelassen%(n_bereiche%)
DIM pitch_bend_zugelassen%(n_bereiche%)
DIM velocity_faktor%(n_bereiche%)
'
' ****************************************
' * Parameter fÅr die Keyboardaufteilung *
' ****************************************
'
' Beispiel
' Erster Bereich
bereich_anfang%(0)=36
bereich_ende%(0)=59
ausgabekanal%(0)=0
transpose%(0)=0
velocity_faktor%(0)=100
after_touch_zugelassen%(0)=ja%
pitch_bend_zugelassen%(0)=ja%
'
' Zweiter Bereich
bereich_anfang%(1)=60
bereich_ende%(1)=96
ausgabekanal%(1)=1
transpose%(1)=-12
velocity_faktor%(1)=70
after_touch_zugelassen%(1)=nein%
pitch_bend_zugelassen%(1)=nein%
'
' Dritter Bereich
bereich_anfang%(2)=36
bereich_ende%(2)=96
ausgabekanal%(2)=2
transpose%(2)=12
velocity_faktor%(2)=50
after_touch_zugelassen%(2)=nein%
pitch_bend_zugelassen%(2)=nein%
'
REPEAT
  REPEAT
    gesendet%=BIOS(1,3)
    IF INKEY$<>""
      programmende
    ENDIF
  UNTIL gesendet% ! Wenn ein MIDI-Byte anliegt geht's weiter
  '
  lese_midibyte
  '
  statusbyte%=byte%\16 !HIGH Nibble isolieren
  '
  IF statusbyte%=note_on% OR statusbyte%=note_off%
    lese_datenbyte
    notennummer%=byte%
    lese_datenbyte
    velocity%=byte%
    FOR i%=0 TO n_bereiche%
      IF notennummer%>=bereich_anfang%(i%) AND notennummer%<=bereich_ende%(i%)
        VOID BIOS(3,3,statusbyte%*16+ausgabekanal%(i%))
        VOID BIOS(3,3,notennummer%+transpose%(i%))
        VOID BIOS(3,3,(velocity%/100)*velocity_faktor%(i%))
      ENDIF
    NEXT i%
  ENDIF
  '
  IF statusbyte%=after_touch%
    lese_datenbyte
    FOR i%=0 TO n_bereiche%
      IF after_touch_zugelassen%(i%)
        VOID BIOS(3,3,statusbyte%*16+ausgabekanal%(i%))
        VOID BIOS(3,3,byte%)
      ENDIF
    NEXT i%
  ENDIF
  '
  IF statusbyte%=pitch_bend%
    lese_datenbyte
    l_byte%=byte%
    lese_datenbyte
    h_byte%=byte%
    FOR i%=0 TO n_bereiche%
      IF pitch_bend_zugelassen%(i%)
        VOID BIOS(3,3,statusbyte%*16+ausgabekanal%(i%))
        VOID BIOS(3,3,l_byte%)
        VOID BIOS(3,3,h_byte%)
      ENDIF
    NEXT i%
  ENDIF
  '
UNTIL INKEY$<>""
'
programmende
'
PROCEDURE programmende
  END
RETURN
'
PROCEDURE lese_midibyte
  r%=BIOS(2,3)
  byte%=r%+256 ! Weil die BIOS-Funktion einen negativen Wert ausgibt
RETURN
'
PROCEDURE lese_datenbyte
  REPEAT
    lese_midibyte
  UNTIL byte%<128 ! Eventuelle Echtzeitmeldungen ausfiltern
RETURN
