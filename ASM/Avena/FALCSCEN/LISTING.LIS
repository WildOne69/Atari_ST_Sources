   1: *********************************************
   2: * Bresenham – Kreisalgorithmus in Truecolor *
   3: * (c) 1995 MAXON Computer                   *
   4: * Autor: Michael Wiegers (Jet of AVENA)     *
   5: *********************************************
   6: * Supervisor ein
   7: 
   8:           clr.l     -(SP)
   9:           move.w    #32,-(SP)
  10:           trap      #1
  11:           addq.l    #6,SP
  12:           move.l    D0,-(SP)
  13: 
  14: * Sichert Auflösung und so...
  15: 
  16:           move.w    #-1,-(SP)
  17:           move.w    #88,-(SP)
  18:           trap      #14
  19:           addq.l    #4,SP
  20:           lea       SAVE,A0
  21:           move.w    D0,(A0)+
  22:           move.b    $00000484.w,(A0)+
  23:           move.b    $FFFF8201.w,(A0)+
  24:           move.b    $FFFF8203.w,(A0)+
  25:           move.b    $FFFF820D.w,(A0)+
  26:           move.b    $FFFFFA07.w,(A0)+
  27:           move.b    $FFFFFA09.w,(A0)+
  28: 
  29: * Setzt  neue Auflösung. Leute mit VGA-Monitor
  30: * sollten per Xbios 88 die Auflösung auf
  31: * Truecolor 320*240 schalten.
  32: 
  33:           move.w    #512,$FFFF820A.w
  34:           move.w    #386,$FFFF82C0.w
  35:           move.l    #$00FE00CC,$FFFF8282.w
  36:           move.l    #$00280031,$FFFF8286.w
  37:           move.l    #$009200D9,$FFFF828A.w
  38:           move.l    #$02710265,$FFFF82A2.w
  39:           move.l    #$002F007F,$FFFF82A6.w
  40:           move.l    #$020F026B,$FFFF82AA.w
  41:           clr.w     $FFFF8266.w
  42:           move.w    #256,$FFFF8266.w
  43:           clr.w     $FFFF82C2.w
  44:           move.w    #320,$FFFF8210.w
  45: 
  46: * Setze die neue Screen-Adresse
  47: 
  48:           move.l    #SCREEN,D0
  49:           and.l     #$FFFFFFFC,D0
  50:           lea       $FFFF820D.w,A0
  51:           ror.l     #8,D0
  52:           movep.w   D0,-12(A0)
  53:           rol.l     #8,D0
  54:           move.b    D0,(A0)
  55: 
  56: * Hier ist die Routine, die die Kreisroutine
  57: * initalisiert.
  58: 
  59:           moveq     #0,D0   ;x%=0
  60:           move.w    #40,D1  ;y%=Radius
  61:           move.w    D1,D2   ;\___d%=y%-1
  62:           subq.w    #1,D2   ;/
  63:           lea       SCREEN,A1 ;Kreismittelpunkt.
  64:                               ;.in die Mitte !
  65:           adda.l    #640*100+320,A1
  66:           move.w    #$FFFF,D4        ;Farbe
  67:           bsr.s     CIRCLE           ;Und ab.
  68:                               ;Warte auf Space !
  69: loop:     cmpi.b    #$39,$FFFFFC02.w
  70:           bne.s     loop
  71: 
  72: * Schreibt das Gesicherte zurück
  73: 
  74:           lea       SAVE,A1
  75:           move.w    (A1),-(SP)
  76:           move.w    #88,-(SP)
  77:           trap      #14
  78:           addq.l    #4,SP
  79:           lea       SAVE+2,A1
  80:           move.b    (A1)+,$00000484.w
  81:           move.b    (A1)+,$FFFF8201.w
  82:           move.b    (A1)+,$FFFF8203.w
  83:           move.b    (A1)+,$FFFF820D.w
  84:           move.b    (A1)+,$FFFFFA07.w
  85:           move.b    (A1)+,$FFFFFA09.w
  86: 
  87: * Supervisor aus
  88: 
  89:           move.w    #32,-(SP)
  90:           trap      #1
  91:           addq.l    #6,SP
  92: 
  93:           clr.w     -(SP)  ;Schluß jetzt!
  94:           trap      #1
  95: 
  96: * Hier beginnt die eigentliche Kreisroutine.
  97: 
  98: CIRCLE:
  99:           tst.w     D2        ;\_ if d%<0
 100:           bpl.s     no        ;/
 101:           subq.w    #1,D1     ;then y%=y%-1
 102:           add.w     D1,D2     ;\_ d%=d%+2*y%
 103:           add.w     D1,D2     ;/
 104: no:
 105:           move.w    D0,D3     ;Setze Pixel...
 106:           add.w     D3,D3     ;...undzwar
 107:           move.w    D1,D5     ;alle 8.
 108:           move.w    D1,D6
 109:           lsl.w     #8,D5
 110:           add.w     D5,D5
 111:           lsl.w     #7,D6
 112:           add.w     D5,D6
 113:           movea.l   A1,A0
 114:           adda.l    D3,A0
 115:           adda.l    D6,A0
 116:           move.w    D4,(A0)    ;Pixel 1
 117:           movea.l   A1,A0
 118:           suba.l    D3,A0
 119:           adda.l    D6,A0
 120:           move.w    D4,(A0)    ;Pixel 2
 121:           movea.l   A1,A0
 122:           adda.l    D3,A0
 123:           suba.l    D6,A0
 124:           move.w    D4,(A0)    ;Pixel 3
 125:           movea.l   A1,A0
 126:           suba.l    D3,A0
 127:           suba.l    D6,A0
 128:           move.w    D4,(A0)    ;Pixel 4
 129:           move.w    D1,D3
 130:           add.w     D3,D3
 131:           move.w    D0,D5
 132:           move.w    D0,D6
 133:           lsl.w     #8,D5
 134:           add.w     D5,D5
 135:           lsl.w     #7,D6
 136:           add.w     D5,D6
 137:           movea.l   A1,A0
 138:           adda.l    D3,A0
 139:           adda.l    D6,A0
 140:           move.w    D4,(A0)     ;Pixel 5
 141:           movea.l   A1,A0
 142:           suba.l    D3,A0
 143:           adda.l    D6,A0
 144:           move.w    D4,(A0)     ;Pixel 6
 145:           movea.l   A1,A0
 146:           adda.l    D3,A0
 147:           suba.l    D6,A0
 148:           move.w    D4,(A0)     ;Pixel 7
 149:           movea.l   A1,A0
 150:           suba.l    D3,A0
 151:           suba.l    D6,A0
 152:           move.w    D4,(A0)     ;und Pixel 8
 153: 
 154:           sub.w     D0,D2       ;\
 155:           sub.w     D0,D2       ; >d%=d%-2*x%-1
 156:           subq.w    #1,D2       ;/
 157:           addq.w    #1,D0       ;x%=x%+1
 158:           cmp.w     D1,D0       ;if x%<=y% then
 159:           ble.s     CIRCLE      ;goto CIRCLE:
 160:           rts
 161: 
 162: * Und ein bisschen Speicher hätte ich noch gern.
 163: 
 164:           bss
 165: SAVE:     ds.w 1000
 166: SCREEN:
 167:           ds.l 32000
 168:           ds.l 10000
 169:           end
 170: 
