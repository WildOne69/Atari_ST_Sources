sdrucker:       
        lea     $ffff8800,a0
        lea     2(a0),a1
        move.w  sr,d7
        moveq   #15,d5 ;Port B
        moveq   #7,d6
        ori.w   #$700,sr
        move.b  d6,(a0) ;paût zufÑllig!
        move.b  (a0),d4 ;aufheben
        bsr     port_aus_sel ;Port auf Ausgang
        move.b  (a0),d2 ;aufheben
        st      (a1)  ;Port B high
        bsr     wait
        bsr     port_ein_sel ;Port auf Eingang
        move.b  (a0),d3 ;Port lesen
        not.b   d3    ;defekte Bits sind 1
        bsr     port_aus_sel ;Port auf Ausgang
        clr.b   (a1)  ;Port B low
        bsr     wait
        bsr     port_ein_sel ;Port auf Eingang
        or.b    (a0),d3 ;Port lesen
        move.b  d2,(a1)
        lsl.w   #8,d3
        moveq   #14,d5 ;Port A
        moveq   #6,d6
        bsr     port_aus_sel ;Port auf Ausgang
        move.b  (a0),d2
        move.b  d2,d1
        bset    #5,d1 ;Strobe high
        move.b  d1,(a1)
        bsr     wait
        bsr     port_ein_sel ;Port auf Eingang
        move.b  (a0),d3 ;Port lesen
        not.b   d3
        bsr     port_aus_sel ;Port auf Ausgang
        bclr    #5,d1 ;Strobe low
        move.b  d1,(a1)
        bsr     wait
        bsr     port_ein_sel ;Port auf Eingang
        or.b    (a0),d3 ;Port lesen
        move.b  d2,(a1)
        move.b  #7,(a0)
        move.b  d4,(a1)
        move.w  d7,sr ;Interrupts ausfÅhren
        lea     $fffffa01,a0 ;GPIP-Data
        lea     $fffffa05,a1 ;Data-Direction
        lea     $fffffa09,a2 ;Interrupt-Enable
        move.b  (a0),d4
        move.b  (a1),d5
        move.b  (a2),d6
        movem.w d4-d6,-(sp)
        ori.w   #$700,sr
        bclr    #0,d6
        move.b  d6,(a2) ;Interrupt aus
        bset    #0,d5
        move.b  d5,(a1) ;auf Ausgang
        bset    #0,d4
        move.b  d4,(a0) ;Busy high
        bsr     wait
        bclr    #0,d5
        move.b  d5,(a1) ;auf Eingang
        tst.b   (a0)
        move.b  (a0),d2 ;auslesen
        not.b   d2
        bset    #0,d5
        move.b  d5,(a1) ;auf Ausgang
        bclr    #0,d4
        move.b  d4,(a0) ;Busy low
        bsr     wait
        bclr    #0,d5
        move.b  d5,(a1) ;auf Eingang
        tst.b   (a0)
        or.b    (a0),d2 ;auslesen
        movem.w (sp)+,d4-d6
        move.b  d5,(a1)
        move.b  d4,(a0)
        move.b  d6,(a2)
        move.w  d7,sr
        andi.b  #%00100000,d3
        move.w  d3,d0
        andi.b  #%00000001,d2
        or.b    d2,d0
        rts     


port_aus_sel:   
        move.b  #7,(a0) ;Port auf Ausgang
        move.b  (a0),d0g
        bset    d6,d0
        move.b  d0,(a1)
        move.b  d5,(a0) ;Register wÑhlen
        rts     

port_ein_sel:   
        move.b  #7,(a0) ;Port auf Eingang
        move.b  (a0),d0
        bclr    d6,d0
        move.b  d0,(a1)
        move.b  d5,(a0) ;Register wÑhlen
        rts     


smidi:  lea     $fffffc04,a1
        lea     $fffffc06,a2
        lea     $fffffa23,a3 ;Timer C
        lea     teststring(pc),a4
        moveq   #1,d6
        move.w  sr,d7
        ori.w   #$700,sr
        move.b  #3,(a1) ;Reset
        move.b  #%00010101,(a1)
.sm10:  move.b  (a4)+,d2
        bne.s   .sm15
        moveq   #0,d0
        bra.s   .sm100
.sm15:  moveq   #1,d0
.sm20:  btst    d6,(a1) ;TDRE
        bne.s   .sm40
        cmp.b   (a3),d6 ;Timer C
        bne.s   .sm20
.sm30:  cmp.b   (a3),d6
        beq.s   .sm30
        dbf     d0,.sm20
        moveq   #1,d0 ;Fehler nur bei ACIA
        bra.s   .sm100
.sm40:  move.b  d2,(a2) ;Senderegister
.sm60:  moveq   #1,d0
.sm65:  btst    #0,(a1) ;RDRF
        bne.s   .sm80
        cmp.b   (a3),d6 ;Timer C
        bne.s   .sm65
.sm70:  cmp.b   (a3),d6
        beq.s   .sm70
        dbf     d0,.sm65
        bra.s   .sm90
.sm80:  cmp.b   (a2),d2
        beq.s   .sm10
.sm90:  moveq   #3,d0 ;Fehler
.sm100: move.w  d7,sr
        rts     


slanscc:        
        lea     variables(pc),a6
        lea     $ffff8c00,a2 ;DMA
        lea     $fffffa23,a3 ;Timer C ST-MFP
        lea     $ffff8c81,a4 ;Kanal A (LAN)
        lea     $ffff8c83,a5
        moveq   #1,d6
        move.w  sr,d7
        ori.w   #$700,sr
        lea     $fffffa01,a0 ;ST-MFP
        movep.w 6(a0),d4 ;aufheben
        move.w  d4,d0
        andi.w  #%0000000011001001,d0
        movep.w d0,6(a0)
        cmpi.w  #2,rtyp(a6) ;TT?
        bne.s   .sl5
        move.b  #7,$ffff8800 ;SCC auf LAN
        move.b  $ffff8800,d0
        bset    #6,d0 ;Port A auf Ausgang
        move.b  d0,$ffff8802
        move.b  #14,$ffff8800
        move.b  $ffff8800,d0
        move.w  d0,-(sp)
        bclr    #7,d0
        move.b  d0,$ffff8802
        lea     $fffffa81,a0 ;TT-MFP
        movep.w 6(a0),d5 ;aufheben
        move.w  d5,d0
        andi.w  #%1100000011000011,d0
        movep.w d0,6(a0)
.sl5:   clr.w   $14(a2) ;DMA aus
        lea     scctab(pc),a0
        move.w  (a0)+,d0
.sl10:  move.b  (a0)+,(a4)
        move.b  (a0)+,(a4)
        dbf     d0,.sl10
        bsr     send_get_cpu
        move.w  d0,d3
        andi.w  #$100,d3
        move.b  #$e,(a4)
        move.b  #$03,(a4) ;Schleife aus
        bsr     send_get_cpu
        andi.w  #$200,d0
        or.w    d3,d0
.sl100: lea     dmabuffer+3(a6),a0
        move.l  a0,d1
        andi.w  #$fffc,d1 ;Adresse auf Long
        movea.l d1,a0 ;zum Vergleich aufheben
        movep.l d1,1(a2) ;DMA-Address-Pointer
        moveq   #84,d1 ;84 Zeichen
        movep.l d1,9(a2) ;DMA-BytezÑhler
        move.b  d6,(a4) ;d6=1
        move.b  #$e0,(a4) ;DMA-Requ. on Rec.
        move.w  #2,$14(a2) ;DMA ein, lesen
        lea     teststring(pc),a1
.sl115: move.b  (a1)+,d2
        beq.s   .sl190
        moveq   #1,d1
.sl120: btst    #2,(a4) ;Sendebuffer leer?
        bne.s   .sl160
        cmp.b   (a3),d6 ;Timer C
        bne.s   .sl120
.sl130: cmp.b   (a3),d6
        beq.s   .sl130
        dbf     d1,.sl120
        bra.s   .sl250 ;Timeout
.sl160: move.b  d2,(a5) ;Senderegister
        bra.s   .sl115
.sl190: moveq   #1,d1
.sl200: btst    #6,$15(a2) ;Byte Count Zero
        bne.s   .sl220
        cmp.b   (a3),d6 ;Timer C
        bne.s   .sl200
.sl210: cmp.b   (a3),d6
        beq.s   .sl210
        dbf     d1,.sl200
        bra.s   .sl250 ;Timeout
.sl220: lea     teststring(pc),a1
.sl230: move.b  (a1)+,d2
        beq.s   .sl300
        cmp.b   (a0)+,d2
        beq.s   .sl230
.sl250: bset    #10,d0 ;Fehler
.sl300: move.b  (a4),d1
        bchg    #3,d1
        or.b    d1,d0
        move.b  #5,(a4)
        move.b  #$68,(a4) ;RTS, DTR high
        bsr     wait
        move.b  (a4),d1
        bchg    #5,d1
        or.b    d1,d0
        andi.b  #%00101000,d0
        move.b  #3,(a4) ;EmpfÑnger aus
        clr.b   (a4)
        move.b  #5,(a4) ;Sender aus
        clr.b   (a4)
        lea     $fffffa01,a0 ;ST-MFP restaur.
        movep.w d4,6(a0)
        cmpi.w  #2,rtyp(a6) ;TT?
        bne.s   .sl400
        lea     $fffffa81,a0 ;TT-MFP restaur.
        movep.w d5,6(a0)
        move.w  (sp)+,d1 ;Schntstbel. restaur.
        move.b  d1,$ffff8802
.sl400: move.w  d7,sr
        rts     

srs232scc:      lea   variables(pc),a6
        lea     $fffffa23,a3 ;Timer C ST-MFP
        lea     $ffff8c85,a4 ;Kanal B (RS232)
        lea     $ffff8c87,a5
        moveq   #1,d6 ;fÅr Timeout
        move.w  sr,d7
        ori.w   #$700,sr
        lea     $fffffa01,a2 ;ST-MFP
        move.l  #%11111111101111110000000011001001,d3
        moveq   #6,d4 ;RI
        move.b  rs232modebyte(a6),d0 ;Modem 1?
        beq.s   .sr10 ;Falcon
        cmpi.l  #$00010001,rtyp(a6) ;Mega STE?
        beq.s   .sr5
        lea     $fffffa81,a2 ;TT-MFP
        move.l  #%11111111111101111100000011000011,d3
        moveq   #3,d4 ;RI
.sr5:   tst.b   d0    ;Serial 2 ?
        bgt.s   .sr10 ;nein, Modem 2
        lea     $ffff8c81,a4 ;Kanal A (RS232)
        lea     $ffff8c83,a5
        move.b  #7,$ffff8800 ;SCC auf Serial 2
        move.b  $ffff8800,d0
        bset    #6,d0 ;Port A auf Ausgang
        move.b  d0,$ffff8802
        move.b  #14,$ffff8800
        move.b  $ffff8800,d0
        move.w  d0,-(sp)
        bset    #7,d0
        move.b  d0,$ffff8802
.sr10:  movep.l 2(a2),d5 ;aufheben
        move.l  d5,d0 ;MFP setzen
        and.l   d3,d0
        movep.l d0,2(a2)
        lea     scctab(pc),a0 ;SCC initialisieren
        move.w  (a0)+,d0
.sr12:  move.b  (a0)+,(a4)
        move.b  (a0)+,(a4)
        dbf     d0,.sr12
        bsr     send_get_cpu
        move.w  d0,d3
        andi.w  #$100,d3
        move.b  #$e,(a4)
        move.b  #3,(a4) ;Schleife aus
        bsr     send_get_cpu
        andi.w  #$200,d0
        or.w    d3,d0
.sr100: move.b  (a4),d2 ;SCC auslesen
        eori.b  #%00111000,d2
        move.b  (a2),d3 ;MFP auslesen
        move.b  #5,(a4)
        move.b  #$68,(a4) ;RTS, DTR high
        bsr     wait
        move.b  (a4),d1 ;SCC auslesen
        or.b    d1,d2
        btst    #5,d2 ;CTS
        beq.s   .sr110
        bset    #2,d0
.sr110: btst    #3,d2 ;DCD
        beq.s   .sr120
        bset    #1,d0
.sr120: andi.b  #%00010000,d2 ;SYNC/DSR
        or.b    d2,d0
        cmpi.b  #-2,rs232modebyte(a6)
;Serial 2 ?
        bne.s   .sr125
        move.w  (sp)+,d1 ;Schnttstbel. restaur.
        move.b  d1,$ffff8802
        bra.s   .sr130
.sr125: cmpi.l  #$00010001,rtyp(a6)
;Mega STE? (kein RI!)
        beq.s   .sr130
        move.b  (a2),d1 ;MFP auslesen
        bchg    d4,d1 ;RI
        or.b    d1,d3
        btst    d4,d3 ;RI
        beq.s   .sr130
        bset    #6,d0
.sr130: move.b  #3,(a4) ;Empf. aus
        clr.b   (a4)
        move.b  #5,(a4) ;Sender aus
        clr.b   (a4)  ;RTS, DTR high
        movep.l d5,2(a2) ;MFP restaurieren
        move.w  d7,sr
        rts     

send_get_cpu:   moveq #0,d0
        lea     teststring(pc),a0
        movea.l a0,a1
.sg15:  move.b  (a0)+,d2
        beq.s   .sg95
        moveq   #1,d1
.sg20:  btst    #2,(a4) ;Sendebuffer leer?
        bne.s   .sg60
        cmp.b   (a3),d6 ;Timer C
        bne.s   .sg20
.sg30:  cmp.b   (a3),d6
        beq.s   .sg30
        dbf     d1,.sg20
        bra.s   .sg90 ;Timeout
.sg60:  move.b  d2,(a5) ;Senderegister
        moveq   #1,d1
.sg65:  btst    #0,(a4)
        bne.s   .sg80
        cmp.b   (a3),d6 ;Timer C
        bne.s   .sg65
.sg70:  cmp.b   (a3),d6
        beq.s   .sg70
        dbf     d1,.sg65
        bra.s   .sg90 ;Timeout
.sg80:  cmp.b   (a5),d2
        beq.s   .sg15
.sg90:  moveq   #-1,d0 ;Fehler
        rts     
.sg95:  moveq   #0,d0
        rts     

scctab: .DC.w 13
        .DC.b $9,$c0  ;Reset
        .DC.b $4,$4c  ;2 Stopbit, keine Parity, x16
        .DC.b $1,$00  ;Rx/Tx + Ext./Status-Int. aus
        .DC.b $3,$c0  ;8 BpC, Empf. aus
        .DC.b $5,$60  ;8 BpC, DTR, RTS, Sender aus
        .DC.b $9,$00  ;Interrupts aus
        .DC.b $a,$00  ;NRZ-Kodierung
        .DC.b $b,$50  ;Takt durch Baudratengenerator
        .DC.b $c,$06  ;Baudratentimer low
        .DC.b $d,$00  ;Baudratentimer high
        .DC.b $e,$13  ;Steuerbits/Schleife+Baudrgen.
        .DC.b $3,$c1  ;Empf. ein
        .DC.b $5,$ea  ;Sender ein, RTS, DTR low
        .DC.b $f,$00  ;keine Interrupts


srs232mfp: 
   lea  $fffffa01,a2  ;Basisadresse ST-MFP
   move.l  #%11111111101110010000000011001001,d2
   move.b  variables+rs232modebyte(pc),d3
   bpl.s   .sr10
   lea  $fffffa81,a2  ;Basisadresse TT-MFP
   move.l  #%11111111111111110000000011000011,d2
.sr10:  lea     $fffffa23,a3 ;Timer C ST-MFP
   lea  $ffff8800,a4  ;Soundchip select + read
   lea  2(a4),a5      ;Soundchip write
   moveq   #1,d6      ;fÅr Timeout-Schleife
   move.w  sr,d7
   ori.w   #$700,sr
   movep.l 2(a2),d4   ;aufheben
   movep.l $26(a2),d5 ;aufheben
   move.l  d4,d0
   and.l   d2,d0
   movep.l d0,2(a2)
   move.b  $1c(a2),d0 ;Baudrate
   andi.b  #%11111000,d0
   move.b  d0,$1c(a2) ;Timer D stop
   move.b  #1,$24(a2) ;ergibt 19200 bps
   bset #0,d0   ;Vorteiler 1:4
   move.b  d0,$1c(a2) ;Timer D start
   move.l  #%00000000100010000000000100000111,d0
   movep.l d0,$26(a2)
   tst.b   $2e(a2)    ;Puffer leeren
   bsr  wait
   tst.b   $2e(a2)    ;Puffer leeren
   bsr.s   .sr100     ;Schleife prÅfen
   move.w  d1,d0
   andi.w  #$100,d0
   move.b  #1,$2c(a2)
   bsr.s   .sr100     ;extern prÅfen
   andi.w  #$200,d1
   or.w d1,d0
   tst.b   d3   ;nur TXD->RXD (TT-MFP!)?
   bpl.s   .sr30      ;nein
   movep.l d5,$26(a2) ;Wiederherstellen
   bra.s   .sr50
.sr30:  andi.b  #%11111000,$1c(a2)
   movep.l d5,$26(a2) ;Wiederherstellen
   move.b  #7,(a4)    ;Mix. + Ctrl. Register
   move.b  (a4),d5    ;aufheben
   move.b  d5,d1
   bset #6,d1   ;Port B auf Ausgang
   move.b  d1,(a5)
   move.b  #14,(a4)   ;Port B
   move.b  (a4),d2    ;aufheben
   move.b  d2,d1
   ori.b   #%00011000,d1 ;RTS u. DTR low
   move.b  d1,(a5)
   bsr  wait
   move.b  (a2),d0
   not.b   d0
   andi.b  #%11100111,d1 ;RTS u. DTR high
   move.b  d1,(a5)
   bsr  wait
   or.b (a2),d0
   andi.b  #%01000110,d0
   move.b  d2,(a5)
   move.b  #7,(a4)
   move.b  d5,(a5)
.sr50:  movep.l d4,2(a2)
   move.w  d7,sr
   rts  
.sr100: lea     teststring(pc),a0
.sr110: move.b  (a0)+,d2
   bne.s   .sr115
   moveq   #0,d1
   rts  
.sr115: moveq   #1,d1 ;Zeichen senden und empfangen
.sr120: btst    #7,$2c(a2)
   bne.s   .sr160
   cmp.b   (a3),d6    ;Timer C
   bne.s   .sr120
.sr130: cmp.b   (a3),d6
   beq.s   .sr130
   dbf  d1,.sr120
   rts     ;Timeout
.sr160: move.b  d2,$2e(a2) ;Senderegister
   moveq   #1,d1
.sr165: btst    #7,$2a(a2)
   bne.s   .sr180
   cmp.b   (a3),d6    ;Timer C
   bne.s   .sr165
.sr170: cmp.b   (a3),d6
   beq.s   .sr170
   dbf  d1,.sr165
   rts     ;Timeout
.sr180: cmp.b   $2e(a2),d2
   beq.s   .sr110
   moveq   #-1,d1     ;Fehler
   rts  


wait:   move.l  d0,-(sp)
        moveq   #1,d0 ;5-10ms warten
.wa10:  cmpi.b  #1,$fffffa23
        bne.s   .wa10
.wa20:  cmpi.b  #1,$fffffa23
        beq.s   .wa20
        dbf     d0,.wa10
        move.l  (sp)+,d0
        rts     
