' Direct-to-Harddisk-Sampling mit dem FALCON 030
' Basisroutinen 30.09.1992
' (c)1992 by MAXON-Computer
' Autor: Christian Mîller
'
$m100000
RESERVE 100000
'
init_sound_data !*** Konstanten definieren
get_codec_data  !*** momentane Codec-Werte sichern
sound_buffer_len%=65536
half_buffer%=sound_buffer_len% DIV 2
sound_buffer_adr%=MALLOC(sound_buffer_len%)
vorteiler&=2 !*** 33KHz Samplefrequenz
hd_record !*** Aufnahme starten
hd_stop   !*** Aufnahme stoppen
restore_codec_data !*** Codec-Werte zurÅckschreiben
hd_play   !*** Wiedergabe starten
hd_stop   !*** Wiedergabe stoppen
restore_codec_data !*** Codec-Werte zurÅckschreiben
~MFREE(sound_buffer_adr%)
'
RESERVE   !*** Speicher freigeben
END       !*** Schluû
'
PROCEDURE hd_stop
  ' *** Aufnahme/Wiedergabe stoppen
  ~@buffoper(0)
RETURN
PROCEDURE hd_record
  LOCAL datei$,handle&
  LOCAL output_level&,input_level&
  '
  output_level&=0 !*** 0 dB AbschwÑchung
  input_level&=15 !*** 0 dB Eingangsempfindlichkeit
  '
  PRINT "Aufnahme lÑuft!"
  datei$="SAMPLE.SMP"+CHR$(0)
  handle&=GEMDOS(60,L:V:datei$,0) !*** Datei îffnen
  '
  ~@soundcmd(ltatten_&,SHL(output_level&,4))
  ~@soundcmd(rtatten_&,SHL(output_level&,4))
  ~@soundcmd(ltgain_&,SHL(input_level&,4))
  ~@soundcmd(rtgain_&,SHL(input_level&,4))
  ~@soundcmd(adderin_&,1)
  ~@soundcmd(adcinput_&,0) !*** Input Åber ADC
  ~@setbuffer(1,sound_buffer_adr%,sound_buffer_adr%+sound_buffer_len%+1)
  ~@setsndmode(1) !*** 16 Bit Stereo
  ~@settrack(0,0) !*** Kanal 0 setzen
  ~@setmontrack(0) !** Lautsprecher spielt mit
  ' *** Aufnahme im Loop-Modus
  ~@devconnect(adc_&,dmarec_&,0,vorteiler&,1)
  ~@buffoper(12) !*** und los gehts!
  '
  ' Diese Routine speichert wÑhrend der Aufnahme
  ' schon einen Teil des Samples ab.
  '
  REPEAT
    REPEAT
      ~@buffptr(V:buffpointer%(0))
    UNTIL buffpointer%(1)>=sound_buffer_adr%+half_buffer%
    ~GEMDOS(64,handle&,L:half_buffer%,L:sound_buffer_adr%)
    REPEAT
      ~@buffptr(V:buffpointer%(0))
    UNTIL buffpointer%(1)<sound_buffer_adr%+half_buffer%
    ~GEMDOS(64,handle&,L:half_buffer%,L:sound_buffer_adr%+half_buffer%)
  UNTIL MOUSEK !*** Abbrechen mit Maustaste
  ~GEMDOS(62,handle&) !*** Datei schlieûen
RETURN
PROCEDURE hd_play
  LOCAL datei$,handle&,smp_len%
  LOCAL anz_buffer%,buffer_count%,output_level&
  '
  PRINT "Wiedergabe lÑuft!"
  output_level&=0 !*** 0 dB AbschwÑchung
  '
  OPEN "i",#1,"SAMPLE.SMP"
  smp_len%=LOF(#1) !*** LÑnge des Samples
  CLOSE #1
  anz_buffer%=smp_len% DIV sound_buffer_len%
  '
  datei$="SAMPLE.SMP"+CHR$(0)
  handle&=GEMDOS(61,L:V:datei$,0) !*** Datei îffnen
  ' *** Puffer erst komplett fÅllen
  ~GEMDOS(63,handle&,L:sound_buffer_len%,L:sound_buffer_adr%)
  buffer_count%=1
  '
  ~@soundcmd(ltatten_&,SHL(output_level&,4))
  ~@soundcmd(rtatten_&,SHL(output_level&,4))
  ~@setbuffer(0,sound_buffer_adr%,sound_buffer_adr%+sound_buffer_len%+1)
  ~@setsndmode(1)       !*** 16 Bit Stereo
  ~@settrack(0,0)       !*** Kanal 0 setzen
  ~@setmontrack(0)      !*** Lautsprecher lÑuft mit
  ' *** Wiedergabe im Loop-Modus
  ~@devconnect(dmaplay_&,dac_&,0,vorteiler&,1)
  ~@buffoper(3)         !*** und los gehts!
  '
  ' *** Diese Routine holt wÑhrend das Sample spielt
  ' *** schon die nÑchsten Daten.
  '
  REPEAT
    REPEAT
      ~@buffptr(V:buffpointer%(0)) !*** Zeiger holen
    UNTIL buffpointer%(0)>=sound_buffer_adr%+half_buffer%
    ' *** halben Puffer holen
    ~GEMDOS(63,handle&,L:half_buffer%,L:sound_buffer_adr%)
    REPEAT
      ~@buffptr(V:buffpointer%(0)) !*** Zeiger holen
    UNTIL buffpointer%(0)<sound_buffer_adr%+half_buffer%
    ' *** halben Puffer holen
    ~GEMDOS(63,handle&,L:half_buffer%,L:sound_buffer_adr%+half_buffer%)
    INC buffer_count%
  UNTIL buffer_count%>=anz_buffer%
  ~GEMDOS(62,handle&) !*** Datei schlieûen
RETURN
'
' GFA-BASIC Library fÅr den FALCON 030
' Sound-Sub-System
' (c)1992 by MAXON-Computer
' Autor: Christian Mîller
'
' *** Sound-Subsystem
'
PROCEDURE init_sound_data
  ltatten_&=0
  rtatten_&=1
  ltgain_&=2
  rtgain_&=3
  adderin_&=4
  adcinput_&=5
  setprescale_&=6
  dmaplay_&=0
  dspxmit_&=1
  extinp_&=2
  adc_&=3
  dmarec_&=1
  dsprec_&=2
  extout_&=4
  dac_&=8
  DIM codec_data&(6)
  DIM buffpointer%(3)
RETURN
PROCEDURE get_codec_data
  LOCAL n&
  FOR n&=0 TO 6
    codec_data&(n&)=@soundcmd(n&,-1)
  NEXT n&
RETURN
PROCEDURE restore_codec_data
  LOCAL n&
  FOR n&=0 TO 6
    ~@soundcmd(n&,codec_data&(n&))
  NEXT n&
RETURN
FUNCTION locksnd
  RETURN XBIOS(&H80)
ENDFUNC
FUNCTION unlocksnd
  RETURN XBIOS(&H81)
ENDFUNC
FUNCTION soundcmd(mode&,data&)
  RETURN XBIOS(&H82,mode&,data&)
ENDFUNC
FUNCTION setbuffer(reg&,begaddr%,endaddr%)
  RETURN XBIOS(&H83,reg&,L:begaddr%,L:endaddr%)
ENDFUNC
FUNCTION setsndmode(mode&)
  RETURN XBIOS(&H84,mode&)
ENDFUNC
FUNCTION settrack(playtracks&,rectracks&)
  RETURN XBIOS(&H85,playtracks&,rectracks&)
ENDFUNC
FUNCTION setmontrack(montrack&)
  RETURN XBIOS(&H86,montrack&)
ENDFUNC
FUNCTION setinterrupt(scr_inter&,cause&)
  RETURN XBIOS(&H87,scr_inter&,cause&)
ENDFUNC
FUNCTION buffoper(mode&)
  RETURN XBIOS(&H88,mode&)
ENDFUNC
FUNCTION dsptristate(dspxmit&,dsprec&)
  RETURN XBIOS(&H89,dspxmit&,dsprec&)
ENDFUNC
FUNCTION gpio(mode&,data&)
  RETURN XBIOS(&H8A,mode&,data&)
ENDFUNC
FUNCTION devconnect(src&,dst&,srcclk&,prescale&,protocol&)
  RETURN XBIOS(&H8B,src&,dst&,srcclk&,prescale&,protocol&)
ENDFUNC
FUNCTION sndstatus(reset&)
  RETURN XBIOS(&H8C,reset&)
ENDFUNC
FUNCTION buffptr(pointer%)
  RETURN XBIOS(&H8D,L:pointer%)
ENDFUNC
