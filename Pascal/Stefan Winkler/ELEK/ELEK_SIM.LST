(*****************************************************)
(*    Simulation der Evolution einer Elek-Ursuppe    *)
(*                                                   *)
(*    Version 2.6      fertiggestellt: 1989-07-01    *)
(*    Autor: Stefan Winkler                          *)
(*    erstellt mit ST-Pascal plus V1.20 von CCD      *)
(*****************************************************)

program elek_simulation;

const
  max_zustaende = 25;
  max_eleks = 150;

type
  elek_type = array [1..100] of integer;
                     (* 100 = 4*max_zustaende *)

var
  i,zustaende,eleks,umweltlaenge,
  grafik_flag,abstand : integer;
  paarungsschwelle : real;
  umw,umwstr : string [255];
  umwelt : array [1..255] of integer;
  elek : array [1..max_eleks] of elek_type;
  y0pos,y1pos : array [1..max_eleks] of long_integer;

function rnd : real;
(* gibt Zufallszahl zwischen 0 und 1 zurÅck *)
  function random : integer;
    xbios(17);
begin
  rnd:=abs(random)/32770;
end;

procedure schoepfung;
(* initialisiert Eleks mit Zufallswerten *)
var
  i,j : integer;
begin
  for i:=1 to eleks do
  begin
    j:=1;
    repeat
      elek[i][j]:=round(rnd);
      elek[i][j+1]:=shl(trunc(rnd*zustaende)+1,2)-2;
      j:=j+2;
    until j>shl(zustaende,2);
  end;
end;

procedure grafik_init;
(* zeichnet 10-Prozent-Linien *)
var
  pat,i : integer;
begin
  write(chr(27),'E');
  pat:=$AAAA;
  for i:=1 to 9 do
    hline(0,i*40,639,1,0,0,0,2,pat,0);
  pat:=$FFFF;
  hline(0,0,639,0,0,0,0,0,pat,0);
  hline(0,200,639,0,0,0,0,0,pat,0);
end;

procedure simulation;
var
  i,el,pos,zust,min_elek,max_elek,richtig,
  swap,anfang,ende,xpos : integer;
  durchgang,minimum,maximum : long_integer;
  c : char;
begin
  for i:=1 to eleks do
    y0pos[i]:=399;
  grafik_init;
  durchgang:=0;
  repeat
    durchgang:=durchgang+1;
    maximum:=0;
    minimum:=umweltlaenge;
    for el:=1 to eleks do
    begin
      zust:=2;
      richtig:=0;
(* Vergleich des Outputs mit der Umwelt: *)
      for i:=1 to umweltlaenge do
      begin
        if umwelt[i]=elek[el][zust-1] then
          richtig:=richtig+1;
        zust:=elek[el][zust]+shl(umwelt[i],1);
      end;
      y1pos[el]:=richtig;
      if richtig>maximum then
      begin
        max_elek:=el;
        maximum:=richtig;
      end
     else
      if richtig<minimum then
        minimum:=richtig;
    end;
(* hier wird das Ergebnis dargestellt: *)
    xpos:=int((durchgang*abstand)mod 640);
    if grafik_flag=1 then
    begin
      if durchgang mod 640=0 then
        grafik_init;
      line(xpos,int(400-(maximum*400)div umweltlaenge),
           xpos,int(400-(minimum*400)div umweltlaenge),
           0,0,0,0,$FFFF,2);
    end
   else
    begin
      if xpos=0 then
        xpos:=640;
      for i:=1 to eleks do
        y1pos[i]:=400-(y1pos[i]*400)div umweltlaenge;
      for i:=1 to eleks do
        line(xpos-abstand,int(y0pos[i]),
             xpos,int(y1pos[i]),0,0,0,0,$FFFF,0);
      if xpos=640 then
        grafik_init;
      y0pos:=y1pos;
    end;
(* jetzt werden einige Eleks verÑndert... *)
    if maximum<umweltlaenge then
    begin
(* zuerst das "kosmische Teilchen": *)
      el:=trunc(rnd*eleks)+1;
      pos:=trunc(rnd*zustaende*4)+1;
      if pos mod 2=0 then
        elek[el][pos]:=(trunc(rnd*zustaende*2)+1)*2
       else
        elek[el][pos]:=1-elek[el][pos];
(* nun die Paarung: *)
      if rnd>paarungsschwelle then
      begin
        repeat
          el:=trunc(rnd*eleks)+1;
        until el<>max_elek;
        anfang:=trunc(rnd*zustaende*4)+1;
        ende:=trunc(rnd*zustaende*4)+1;
        if anfang>ende then
        begin
          swap:=ende;
          ende:=anfang;
          anfang:=swap;
        end;
        for i:=anfang to ende do
          elek[el][i]:=elek[max_elek][i];
      end;
    end;
  until maximum=umweltlaenge;
  write(chr(27),'Y',chr(56),chr(32),' Taste...');
  read(c);
(* zum Abschluû noch einige Informationen: *)
  writeln;
  writeln(chr(27),'EUmweltfolge : ');
  writeln(umwstr);
  writeln;
  writeln('nach ',durchgang,' DurchgÑngen');
  writeln('konnte folgendes Elek diese Umweltfolge 
           richtig voraussagen : ');
  writeln;
  write(' Taste...');
  read(c);
  writeln(chr(27),'ESignal:  0         1');
  writeln;
  i:=1;
  repeat
    write(i div 4+1:3,':  (',elek[max_elek][i]:2,',',
          (elek[max_elek][i+1]+2)div 4:3,')');
    i:=i+2;
    writeln('  (',elek[max_elek][i]:2,',',
                 (elek[max_elek][i+1]+2)div 4:3,')');
    i:=i+2;
  until i>zustaende*4;
  write(chr(27),'Y',chr(37),chr(80),' Taste...');
  read(c);
  write(chr(27),'Y',chr(37),chr(80));
end;

begin
  write(chr(27),'b',chr(0),chr(27),'c',chr(1),
        chr(27),'E');
  write('Version 2.6',chr(27),'Y',chr(32),chr(101),
        chr(189),' Juli 1989');
  writeln(chr(27),'Y',chr(34),chr(59),
          '+---------------------+');
  writeln(chr(27),'Y',chr(35),chr(59),
          '|  Elek - Simulation  |');
  writeln(chr(27),'Y',chr(36),chr(59),
          '+---------------------+');
  writeln;
  writeln;
  write('Anzahl der mîglichen ZustÑnde 
        (1..',max_zustaende,') : ');
  readln(zustaende);
  write('Anzahl der Eleks (1..',max_eleks,') : ');
  readln(eleks);
  write('einzelne Eleks oder nur bestes und 
        schlechtestes darstellen (0/1): ');
  readln(grafik_flag);
  if grafik_flag=0 then
  begin
    write('Anzahl Åbersprungener Pixel 
          (sinnvoll: 2,4,5,8,10,16,20,32,40,64): ');
    readln(abstand);
  end
 else
    abstand:=1;
  write('Paarungsschwelle (0-immer..1-nie) : ');
  readln(paarungsschwelle);
  write('LÑnge der Umweltfolge (1..255) : ');
  readln(umweltlaenge);
  writeln;
  writeln('Umweltfolge (wird auf obige LÑnge 
                        periodisch ergÑnzt) :');
  readln(umw);
  write(chr(27),'E',chr(27),'f',eleks:4,
        ' Eleks werden erschaffen...');
(* nur Nullen und Einsen in Umweltfolge: *)
  for i:=1 to length(umw) do
    if not (umw[i] in ['0','1']) then
      delete(umw,i,1);
  if length(umw)<1 then
    umw:='1';
  umwstr:='';
(* periodisch erweitern: *)
  for i:=1 to (umweltlaenge div length(umw)) do
    umwstr:=concat(umwstr,umw);
  for i:=1 to (umweltlaenge mod length(umw)) do
    umwstr:=concat(umwstr,umw[i]);
  for i:=1 to umweltlaenge do
    umwelt[i]:=ord(umwstr[i])-48;
  schoepfung;
  simulation;
end.

