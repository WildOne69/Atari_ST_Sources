DEFINITION MODULE LowLevelLineA;

FROM SYSTEM IMPORT ADDRESS;

TYPE CTRLPTR = POINTER TO ARRAY[0..11] OF INTEGER;
     PTSPTR  = POINTER TO ARRAY[0..127] OF INTEGER;
     INTPTR  = POINTER TO ARRAY[0..127] OF INTEGER;

(* Beschreibung der Line-A-Variablen, entnommen dem ATARI ST Profibuch *)

TYPE LINEA = RECORD

   PLANES    : INTEGER;  (* Anzahl der Bildschirmebenen (+$00) *)
   WIDTH     : INTEGER;  (* Bytes pro Bildschirmzeil (+$02) *)
   CONTRL    : CTRLPTR;  (* Zeiger auf contrl (VDI) (+$04) *)
   INTIN     : INTPTR;   (* Zeiger auf int_in (VDI) (+$08) *)
   PTSIN     : PTSPTR;   (* Zeiger auf pts_in (VDI) (+$0C) *)
   INTOUT    : INTPTR;   (* Zeiger auf int_out (VDI) (+$10) *)
   PTSOUT    : PTSPTR;   (* Zeiger auf pts_out (VDI) (+$14) *)
   COLBIT0,              (* Farbwert fÅr Plane 0 (+$18) *)
   COLBIT1,              (* Farbwert fÅr Plane 1 (+$1A) *)
   COLBIT2,              (* Farbwert fÅr Plane 2 (+$1C) *)
   COLBIT3   : INTEGER;  (* Farbwert fÅr Plane 3 (+$1E) *)
   LSTLIN    : INTEGER;  (* letzen Pixel einer Linie zeichen (1)
                            oder nicht zeichnen (0) (+$20) *)
   LNMASK    : CARDINAL; (* Muster fÅr Linien (+$22) *)
   WMODE     : INTEGER;  (* VDI_Schreibmodus (+$24) *)
   X1,Y1,
   X2,Y2     : INTEGER;  (* Koordinatenangaben (+$26) *)
   PATPTR    : ADDRESS;  (* Zeiger auf FÅllmuster (+$2E) *)
   PATMSK    : INTEGER;  (* dazugehîrige Maske (+$32) *)
   MFILL     : INTEGER;  (* FÅllmuster monochr./farbig (+$34) *)
   CLIP      : INTEGER;  (* Clipping aus/an (+$36) *)
   XMINCL,               (* linke obere Ecke des Clip-rect. (+$38) *)
   YMINCL,
   XMAXCL,               (* rechte untere Ecke des Clip-rect. (+$3C) *)
   YMAXCL    : INTEGER;
   XDDA      : INTEGER;  (* vor Textausgaben auf 08000H setzen (+$40) *)
   DDAINC    : INTEGER;  (* Vergrîûerungsfaktor - bei Vergrîûerung:
                            256*(Wunschgrîûe-Aktuelle)/Aktuelle;
                            bei Verkleinerung:
                            256*(Wunschgrîûe)/Aktuelle;   (+$42) *)
   SCALDIR   : INTEGER;  (* Vergrîûerungsrichtung (0 : verkleinern,
                            1 : vergrîûern) (+$44) *)
   MONO      : INTEGER;  (* Proportionalschrift ja/nein (+$46) *)
   SOURCEX,
   SOURCEY   : INTEGER;  (* X,Y-Koordinate im Zeichensatz (+$48) *)
   DESTX,
   DESTY     : INTEGER;  (* Zeichen-Koordinate auf dem Bildschirm (+$48) *)
   DELX,
   DELY      : INTEGER;  (* Breite und Hîhe des Zeichens (+$50) *)
   FBASE     : ADDRESS;  (* Zeiger auf Zeichensatzimage (+$54) *)
   FWIDTH    : INTEGER;  (* Breite des Zeichensatzimage (+$58) *)
   STYLE     : INTEGER;  (* Schreibstil (+$5A)
                            Bit 0: Fettschrift
                            Bit 1: Helle Schrift
                            Bit 2: Kursivschrift
                            Bit 3: Unterstrichene Schrift
                            Bit 4: Umriû-Schrift *)
   LITEMASK  : INTEGER;  (* Maske fÅr das Schattieren (light) (+$5C) *)
   SKEWMASK  : INTEGER;  (* Maske fÅr Italics (+$5E) *)
   WEIGHT    : INTEGER;  (* zusÑtzliche Breite bei Bold (+$60) *)
   ROFF      : INTEGER;  (* Kursiv-Offset rechts (+$62) *)
   LOFF      : INTEGER;  (* Kursiv-Offset links (+$64) *)
   SCALE     : INTEGER;  (* Vergrîûerung ja/nein (+$66) *)
   CHUP      : INTEGER;  (* Rotationswinkel * 10 (+$68) *)
   TEXTFG    : INTEGER;  (* Textfarbe (+$6A) *)
   COPYTRAN  : INTEGER;  (* Flag fÅr "COPY RASTER FORM"
                            (0:"opaque", 1:"transparent") (+$74) *)
   SEEDABORT : ADDRESS;  (* Pointer auf Routine, die nach jeder Bildzeile
                            eines "SEEDFILL" aufgerufen wird (+$76) *)

  END(*RECORD*);

VAR LineAVars     : POINTER TO LINEA;
    SysFontTable  : POINTER TO ARRAY[0..2] OF ADDRESS;
    LineARoutines : POINTER TO ARRAY[0..14] OF ADDRESS;

PROCEDURE PutPixel;
CODE (0A001H);

PROCEDURE GetPixel;
CODE (0A002H);

PROCEDURE ArbitraryLine;
CODE (0A003H);

PROCEDURE HorizontalLine;
CODE (0A004H);

PROCEDURE FilledRectangle;
CODE (0A005H);

PROCEDURE FilledPolygon;
CODE (0A006H);

PROCEDURE BitBlt;
CODE (0A007H);

PROCEDURE TextBlt;
CODE (0A008H);

PROCEDURE ShowMouse;
CODE (0A009H);

PROCEDURE HideMouse;
CODE (0A00AH);

PROCEDURE TransformMouse;
CODE (0A00BH);

PROCEDURE UndrawSprite;
CODE (0A00CH);

PROCEDURE DrawSprite;
CODE (0A00DH);

PROCEDURE CopyRasterForm;
CODE (0A00EH);

PROCEDURE Seedfill;
CODE (0A00FH);

END LowLevelLineA.
