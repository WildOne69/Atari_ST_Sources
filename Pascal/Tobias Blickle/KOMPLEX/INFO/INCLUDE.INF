Kurzbeschreibung der Include-Files KPXDEKL / KPXSUBS
====================================================
( von Tobias Blickle ) 

Diese beiden Dateien bilden den Grundstock fÅr die Auswertung 
eines komplexen Ausdrucks. In dem File KPXDEKL sind alle 
notwendigen Konstanten-/ Typ-/ und Variablen-Deklaration 
enthalten. Die Datei KPXSUBS stellt die nîtigen Prozeduren zur 
VerfÅgung.

Mit INIT_KOMPLEX wird das Prozedurpaket initialisiert.

Um einen komplexen Ausdruck zu berechnen muû zuerst die Prozedur 
BAUM_BAU(befehl,wurzel,status) aufgerufen werden, die einen 
Syntaxbaum aufbaut und ggf. Fehlermeldungen ausgibt. In <befehl> 
steht der Ausdruck, <wurzel> ist nach dem Prozeduraufruf der 
Zeiger auf die Wurzel des Baums ,<status> ist TRUE, wenn kein 
Fehler aufgetreten ist, sonst FALSE. Danach wird mit der Prozedur 
AUSWERTUNG(wurzel,re,im) der Ausdruck ausgerechnet. <wurzel> ist 
der Zeiger aus der Prozedur BAUM_BAU, <re> enthÑlt den Realteil 
des Ergebnisses, <im> den ImaginÑrteil.

Mit CLR_BAUM(wurzel) kann ein bestehender Baum aus dem Speicher 
gelîscht werden.

Das Programm berechnet beliebige, komplexe AusdrÅcke mit beliebig 
vielen Variablen und Macros. Es beherrscht die 
Grundrechenoperationen + - * / ^  (alle im komplexen Zahlenbereich), 
sowie Klammerungen in beliebiger Tiefe. Als vordefinierte Konstanten 
kennt das Programm die imaginÑre Einheit 'i' 
und die Kreistzahl 'pi'; definierte Funktionen sind : 

       EXP(<ausdruck>) - komplexe e-Funktion 
       LN(<ausdruck>)  - komplexer natÅrlicher Logarithmus
       SIN(<ausdruck>) - komplexer Sinus
       ASIN(<ausdruck>)- komplexer Arcussinus 
       COS(<ausdruck>) - komplexer Cosinus
       ACOS(<ausdruck>)- komplexer Arcuscosinus
       TAN(<ausdruck>) - komplexer Tangens
       ATAN(<ausdruck>)- komplexer Arcustangens
       SQR(<ausdruck>) - das Quadrad von <ausdruck>
       SQRT(<ausdruck>)- die Quadratwurzel von <ausdruck>
       ABS(<ausdruck>) - den Betrag von <ausdruck>
       ARG(<ausdruck>) - den Winkel zwischen Real- und ImaginÑrteil von
                         <ausdruck> im Bogenmaû
       RE(<ausdruck>)  - den Realteil von <ausdruck>
       IM(<ausdruck>)  - den ImaginÑrteil von <ausdruck>

Die Funktionsnamen mÅssen groû geschrieben werden.
Bei mehrdeutigen Funktion wie SQRT oder LN wird jeweils nur der 
Hauptwert berechnet.

Zur Variablenverwaltung stehen die Prozeduren
   SET_VARIABLE(was:var_string;re,im:real);
   GET_VARIABLE(was:var_string;var re,im:real;var gefunden:boolean);
   DEL_VARIABLE(was:var_string);
zur VerfÅgen. <was> enthÑlt den Variablennamen der nur 
Kleinbuchstaben und Ziffern enthalten darf. Mit SET_VARIABLE wird 
die entsprechende Variable mit dem <re> als Real- und <im> als 
ImaginÑrteil gesetzt. Ist die Variable bereits vorhanden, wird der 
alte Wert Åberschrieben.
Den Variableninhalt erhÑlt man mit der Prozedur GET_VARIABLE. Ist 
die Variable unbekannt so ist <gefunden> FALSE. Zum Lîschen einer 
Variable dient schlieûlich die Prozedur DEL_VARIABLE.

Die Variablen werden in einer Hashtabelle verwaltet, deren Grîûe 
beliebig ist. In jedem Fall ist die Anzahl der Variablen nur durch 
den Speicherplatz beschrÑnkt.

Zur Verwendung von Macros dienen die analogen Prozeduren 
   GET_MACRO(was:var_string;var zeiger:baumzeiger);
   SET_MACRO(was:var_string;inhalt:string);
   DEL_MACRO(was:var_string);
Der Macroname <was> darf nur aus Groûbuchstaben und Ziffern bestehen.
Ein Macro dient zur Zusammenfassung eines beliebigen Ausdrucks unter 
einem Namen. Der Ausdruck darf wiederum Variablen und Macros 
enthalten.


Mit Hilfe dieser Bibliothek ist es relativ einfach, leistungsfÑhige 
komplex-rechnende Programme zu schreiben. Als Beispiel dienen die 
Programme KRECHNER und KPXGRAPH.  

