 '*********************************
 '* Dynamische Speicherverwaltung *
 '*       mit OMIKRON BASIC       *
 '*       von Mario Srowig        *
 '*   (c) 1992 MAXON Computer     *
 '*********************************


 'LIBRARY Gem ,"c:\omikron\interpr\GEM.LIB":'GEM-Library in Basic einbinden

  CLEAR 150000:'Genug Speicher fÅr Zugriff durch MEMORY reservieren

  Appl_Init:'GEM anmelden

  PRINT CHR$(27);"f":'Cursor aus
  Pfad$="A:\*.*":Ja%L=-1:Nein%L=0
  Ndateien_Max%L=10:Nbytes%L=100000:'       Maximal 10 Dateien in einem
  Create_Dyna_Ram(Ndateien_Max%L,Nbytes%L):'Gesamtspeicher von 100 000 Bytes
                                       'verwalten
  Init_Funktionkeys
  Titel%L= MEMORY(80):'Speicher fÅr Window Titel-
  Info%L= MEMORY(80):' und Infozeile reservieren

 MOUSEOFF

 Wind_Get(0,4,X%L,Y%L,W%L,H%L)
 Wind_Create(17,X%L,Y%L,W%L,H%L,Handle%L)
 Wind_Open(Handle%L,X%L,Y%L,W%L,H%L)

 'HAUPTMENUE - SCHIRM

 REPEAT
   Clear_Screen
   Wind_Set(Handle%L,2,"Dynamische Speicherverwaltung",Titel%L)
   Wind_Set(Handle%L,3,"",Info%L)

   LOCATE 5,2: PRINT "F1=Datei laden"
   LOCATE 7,2: PRINT "F2=Datei zeigen"
   LOCATE 9,2: PRINT "F3=Speicherplatz INFO"
   LOCATE 11,2: PRINT "F4=Datei aus RAM lîschen"
   LOCATE 13,2: PRINT "F5=Programm Verlassen"

   Scan_Keyboard
   IF Scan_Code%L=F1%L THEN Datei_Laden
   IF Scan_Code%L=F2%L THEN Datei_Zeigen
   IF Scan_Code%L=F3%L THEN Speicherplatz_Info
   IF Scan_Code%L=F4%L THEN Datei_Aus_Ram_Loeschen
   IF Scan_Code%L=F5%L THEN Programm_Verlassen
 UNTIL Endlos%L

 DEF PROC Datei_Laden
   Laden%L=Ja%L
   Auswahl_Datei(Pfad$,"DATEI LADEN")
   IF Ok%L AND Laden%L AND Datei_Vorhanden%L THEN
     IF Dateilaenge%L>Nbytes_Frei%L THEN
       Hinweis "Es ist nicht genÅgend|Speicherplatz vorhanden!"
     ELSE
       Datei_Start%L=Dyna_Ram_Start%L
       FOR I%L=0 TO Dateiptr%L
         Datei_Start%L=Datei_Start%L+Dateilaenge%L(I%L)
       NEXT
       BLOAD Dateiname$,Datei_Start%L
       Dateilaenge%L(Dateiptr%L)=Dateilaenge%L
       Dateiname$(Dateiptr%L)=Name$
       Dateiptr%L=Dateiptr%L+1
       Nbytes_Frei%L=Nbytes_Frei%L-Dateilaenge%L
     ENDIF
   ENDIF
 RETURN

 DEF PROC Auswahl_Datei(R Pfad$,Kopfzeile$)
   MOUSEON
   Fsel_Exinput(Pfad$,Name$,Kopfzeile$,Ok%L)
   MOUSEOFF
   IF Ok%L AND Laden%L THEN
     Dateiname$= LEFT$(Pfad$, LEN(Pfad$)- INSTR(1, MIRROR$(Pfad$)+"\","\"))+"\"+Name$
     Datei_Vorhanden Dateiname$
     IF NOT Datei_Vorhanden%L THEN Hinweis "Die Datei ist|nicht vorhanden!"
   ENDIF
 RETURN

 DEF PROC Datei_Zeigen
   Wind_Set(Handle%L,2,"Datei Zeigen",Titel%L)
   Wind_Set(Handle%L,3,"F1=VorblÑttern F2=ZurÅckblÑttern ESC=Abbruch",Info%L)
   Clear_Screen
   Dateien_Zeigen
   PRINT CHR$(27);"e":'Cursor ein
   LOCATE 20,2: PRINT "Welche Datei soll gezeigt werden? ";
   INPUT Eingabe$ USING "0-0",Ret%L,2
   PRINT CHR$(27);"f":'Cursor aus
   Dnr%L= VAL(Eingabe$)
   IF Dnr%L<=Dateiptr%L THEN
     Clear_Screen
     Startadr%L=Dyna_Ram_Start%L
     FOR I%L=0 TO Dnr%L-2
       Startadr%L=Startadr%L+Dateilaenge%L(I%L)
     NEXT
     Laenge%L=Dateilaenge%L(Dnr%L-1)
     Zeichennr%L=0
     Daten_Anzeigen
   ELSE EXIT
   ENDIF

   REPEAT
     Scan_Keyboard

     IF Scan_Code%L=F1%L THEN :' VorblÑttern
        IF Zeichennr%L>Laenge%L THEN Zeichennr%L=Zeichennr%L-1520
        IF Zeichennr%L<0 THEN Zeichennr%L=0
        Daten_Anzeigen
     ENDIF

     IF Scan_Code%L=F2%L THEN :' ZurÅckblÑttern
        Zeichennr%L=Zeichennr%L-3040
        IF Zeichennr%L<0 THEN Zeichennr%L=0
        Daten_Anzeigen
     ENDIF

     IF Scan_Code%L=1 THEN EXIT
   UNTIL Endlos%L
 RETURN

 DEF PROC Daten_Anzeigen
   FOR Zeile%L=5 TO 24
     FOR Spalte%L=2 TO 77
       LOCATE Zeile%L,Spalte%L
       IF Zeichennr%L<=Laenge%L THEN
         PRINT CHR$(1); CHR$( PEEK(Startadr%L+Zeichennr%L))
         Zeichennr%L=Zeichennr%L+1
       ELSE PRINT " "
       ENDIF
     NEXT
   NEXT
 RETURN

 DEF PROC Speicherplatz_Info
   Clear_Screen
   Wind_Set(Handle%L,2,"Speicherplatz INFO",Titel%L)
   Wind_Set(Handle%L,3,"ESC=Abbruch",Info%L)
   LOCATE 5,2: PRINT "Freier Speicherplatz: ";Nbytes_Frei%L;" Bytes"
   Dateien_Zeigen
   REPEAT :Scan_Keyboard: UNTIL Scan_Code%L=1
 RETURN

 DEF PROC Datei_Aus_Ram_Loeschen
   Clear_Screen
   Wind_Set(Handle%L,2,"Datei aus RAM lîschen",Titel%L)
   Wind_Set(Handle%L,3,"ESC=Abbruch  F1=lîschen",Info%L)
   Dateien_Zeigen
   REPEAT
     Scan_Keyboard
     IF Scan_Code%L=F1%L THEN
        PRINT CHR$(27);"e"
        LOCATE 20,2: PRINT "Welche Datei soll gelîscht werden? ";

        INPUT Eingabe$ USING "0-0",Ret%L,2
        PRINT CHR$(27);"f"
        Dnr%L= VAL(Eingabe$)
        IF Dnr%L<=Dateiptr%L THEN
          IF Dnr%L=Dateiptr%L THEN
             Nbytes_Frei%L=Nbytes_Frei%L+Dateilaenge%L(Dnr%L-1)
          ELSE
             Gesamtlaenge%L=0
             FOR I%L=Dnr%L TO Dateiptr%L-1
               Gesamtlaenge%L=Gesamtlaenge%L+Dateilaenge%L(I%L)
             NEXT
             Datei_Start%L=Dyna_Ram_Start%L
             FOR I%L=0 TO Dnr%L-2
               Datei_Start%L=Datei_Start%L+Dateilaenge%L(I%L)
             NEXT
             MEMORY_MOVEB Datei_Start%L+Dateilaenge%L(Dnr%L-1),Gesamtlaenge%L TO Datei_Start%L
             Nbytes_Frei%L=Nbytes_Frei%L+Dateilaenge%L(Dnr%L-1)
             FOR I%L=Dnr%L-1 TO Dateiptr%L-1
               Dateilaenge%L(I%L)=Dateilaenge%L(I%L+1)
               Dateiname$(I%L)=Dateiname$(I%L+1)
             NEXT
           ENDIF
           Dateiptr%L=Dateiptr%L-1
           Clear_Screen
           Dateien_Zeigen
        ENDIF
     ENDIF
   UNTIL Scan_Code%L=1
 RETURN

 DEF PROC Dateien_Zeigen
   FOR I%L=7 TO 7+Dateiptr%L-1
     LOCATE I%L,2
     PRINT "Datei Nr.: "; USING "###";I%L-6;
     PRINT " Dateiname: ";Dateiname$(I%L-7);
     LOCATE I%L,40
     PRINT " DateilÑnge: "; USING "#######";Dateilaenge%L(I%L-7);
     PRINT " Bytes"
   NEXT
 RETURN

 DEF PROC Clear_Screen
   Wind_Get(Handle%L,4,X%L,Y%L,W%L,H%L)
   FILL COLOR =0: PBOX X%L,Y%L,W%L,H%L
 RETURN

 DEF PROC Programm_Verlassen
   Appl_Exit
   END
 RETURN

 DEF PROC Init_Funktionkeys
   FOR I%L=1 TO 10: KEY I%L=" ": NEXT
   'Scan-codes
   F1%L=$3B:F2%L=$3C:F3%L=$3D:F4%L=$3E:F5%L=$3F
   F6%L=$40:F7%L=$41:F8%L=$42:F9%L=$43:F10%L=$44
 RETURN

 DEF PROC Scan_Keyboard
   REPEAT
   A$= INKEY$
   IF A$<>"" THEN
     Byte1%L= ASC( MID$(A$,1,1))
     Shift_R%L= BIT(0,Byte1%L)
     Shift_L%L= BIT(1,Byte1%L)
     Control%L= BIT(2,Byte1%L)
     Alternate%L= BIT(3,Byte1%L)
     Caps_Lock%L= BIT(4,Byte1%L)
     Scan_Code%L= ASC( MID$(A$,2,1))
     Ascii_Code%L= ASC( MID$(A$,4,1))
   ENDIF
   UNTIL A$<>""
 RETURN

 DEF PROC Create_Dyna_Ram(Ndateien_Max%L,Nbytes%L)
   Nd_Max%L=Ndateien_Max%L-1
   Dyna_Ram_Start%L= MEMORY(Nbytes%L)
   Nbytes_Frei%L=Nbytes%L
   DIM Dateilaenge%L(Nd_Max%L),Dateiname$(Nd_Max%L)
   Dateiptr%L=0
   Dateilaenge%L(Dateiptr%L)=0
 RETURN

 DEF PROC Datei_Vorhanden(Datei$)
   OPEN "F",15,Datei$,0
   Datei_Vorhanden%L= NOT EOF(15)
   CLOSE 15
   IF Datei_Vorhanden%L THEN
      OPEN "i",15,Datei$
      Dateilaenge%L= LOF(15)
      CLOSE 15
   ENDIF
 RETURN

 DEF PROC Hinweis(Meldung$)
   MOUSEON
   FORM_ALERT (1,"[1]["+Meldung$+"][OK]",Wahl%)
   MOUSEOFF
 RETURN

 LIBRARY CODE Gem
